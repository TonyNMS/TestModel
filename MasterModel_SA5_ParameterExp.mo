model MasterModel_SA5_ParameterExp
  // External Model Repository for Local MasterModel_SA5_ParameterExp Use
  /*Master Controller*/

  model MasterControllerSingleBattery
    //External Models For Local MasterController Use
    /*BatteryDispatchableControlBase*/

    partial model BatteryDispatchableControlBase "Base interface for battery/dispatchable energy sources controller."
      Modelica.Blocks.Interfaces.RealOutput P_dispatch[n] annotation(
        Placement(transformation(extent = {{100.23233486262458, -51.58794040978954}, {120.23233486262458, -31.58794040978954}}, rotation = 0.0, origin = {0.0, 0.0})));
      parameter Integer n = 1 "Number of dispatchable units";
      parameter Real dieselP_start = 0 "Start power of the genset" annotation(
        Dialog(tab = "Initialization"));
      parameter Real batteryP_start = 0 "Start power of the battery" annotation(
        Dialog(tab = "Initialization"));
      parameter Real SOC_max = 0.9 "Maximum state of charge" annotation(
        Dialog(group = "Operational constraints"));
      parameter Real SOC_min = 0.1 "Minimum state of charge" annotation(
        Dialog(group = "Operational constraints"));
      parameter Modelica.Units.SI.Power P_charging_max = 2e5 "Maximum charge rate of the battery" annotation(
        Dialog(group = "Operational constraints"));
      parameter Modelica.Units.SI.Power P_charging_min = -P_charging_max "Maximum discharge rate of the battery" annotation(
        Dialog(group = "Operational constraints"));
      parameter Real P_max[n] = {10} "Maximal power of the gensets, in decreasing priority" annotation(
        Dialog(group = "Operational constraints"));
      annotation(
        Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid), Text(extent = {{-38, 26}, {38, -30}}, lineColor = {255, 255, 255}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "C"), Text(extent = {{-100, -110}, {100, -130}}, lineColor = {0, 0, 0}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "%name")}));
    end BatteryDispatchableControlBase;

    /*MultiControllerCore*/

    model MultiControllerCore "Controller for a set of 2 batteries and a set of desiel generators"
      //External Function Repository for Local Use//
      /*cubicStep function*/

      function cubicStep "Cubic step function"
        input Real tau "Abcissa";
        output Real y "Value";
      algorithm
        y := if tau < 0 then 0 else (if tau > 1 then 1 else (3 - 2*tau)*tau^2);
      end cubicStep;

      /*minLocal function*/

      function minLocal
        input Real a;
        input Real b;
        output Real result;
      algorithm
        result := if a < b then a else b;
      end minLocal;

      /*maxLocal function*/

      function maxLocal
        input Real a;
        input Real b;
        output Real result;
      algorithm
        result := if a > b then a else b;
      end maxLocal;

      parameter Real SOC_max = 0.9 "Max State of Charge" annotation(
        Dialog(group = "Battery"));
      parameter Real SOC_min = 0.1 "Min State of Charge" annotation(
        Dialog(group = "Battery"));
      parameter Modelica.Units.SI.Power P_charging_max = 2e5 "Max Charing Rate" annotation(
        Dialog(group = "Battery"));
      parameter Modelica.Units.SI.Power P_charging_min = -P_charging_max "Maximum discharge rate" annotation(
        Dialog(group = "Battery"));
      parameter Modelica.Units.SI.Power P_rate_gen = 200*10000 "Generator max output" annotation(
        Dialog(group = "Diesel generator"));
      parameter Real dieselP_start = 0 "Initital power by generator";
      parameter Real batteryP_start = 0 "Initial power by battery";
      Modelica.Units.SI.Power P_net = (P_renew_1) - (P_load_1) "Net available power (renewable production - load)";
      output Modelica.Units.SI.Power P_surplus_1 "Surplus Power for Battery 1";
      Modelica.Blocks.Interfaces.RealInput P_renew_1 "Power produced by renewable energy source 1 (photovoltaics, wind, hydro) in W" annotation(
        Placement(transformation(origin = {-50, 50}, extent = {{-70, 10}, {-50, 30}}), iconTransformation(origin = {-50, 28}, extent = {{-70, 10}, {-50, 30}})));
      Modelica.Blocks.Interfaces.RealInput P_load_1 "Load power in W" annotation(
        Placement(transformation(origin = {-220, 10}, extent = {{100, 30}, {120, 50}}), iconTransformation(origin = {-220, 48}, extent = {{100, 30}, {120, 50}})));
      Modelica.Blocks.Interfaces.RealInput SOC_1(min = SOC_min, max = SOC_max) "State of charge in p.u." annotation(
        Placement(transformation(origin = {-110, 32}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-110, -68}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_battery_1(start = batteryP_start) "Battery_1 charging power" annotation(
        Placement(transformation(origin = {0, 30}, extent = {{100, 30}, {120, 50}}), iconTransformation(origin = {0, 30}, extent = {{100, 30}, {120, 50}})));
      Modelica.Blocks.Interfaces.RealOutput P_dieselGen(start = dieselP_start) "Power produced by diesel generators" annotation(
        Placement(transformation(extent = {{100, -50}, {120, -30}}), iconTransformation(origin = {-100, 20}, extent = {{200, -100}, {240, -60}})));
      parameter Real smooth_charge_percentage = 0.1;
      Real smooth_soc_max;
      //Smooth the charge close to SOC_max,starting at smooth_charge_percentage from SOC_max
      Real smooth_soc_min;
      //Smooth the charge close to SOC_min,starting at smooth_charge_percentage from SOC_min
      Real previousPnet(start = 0);
      Real VarPnet;
      Real Pdieselgenx(start = 0);
      Real dieselcall(start = 1);
      Modelica.Blocks.Interfaces.RealInput SOC_tank(min = 0, max = 1) "State of tank" annotation(
        Placement(transformation(origin = {0, 120}, extent = {{-20, -20}, {20, 20}}, rotation = 270), iconTransformation(origin = {-28, 120}, extent = {{-20, -20}, {20, 20}}, rotation = 270)));
      parameter Real SOC_tank_sec = 0.2 "Tank level limit to activate second stage minimal Battery SOC";
      parameter Real SOC_min_sec = 0.005 "Minimum state of charge, second stage" annotation(
        Dialog(group = "Battery"));
      parameter Modelica.Units.SI.Power MinValy annotation(
        Dialog(tab = "Battery Controls"));
      parameter Modelica.Units.SI.Power MaxValu annotation(
        Dialog(tab = "Battery Controls"));
      parameter Real BatteryDieselCont annotation(
        Dialog(tab = "Battery Controls"));
    equation
      smooth_soc_max = (1 - cubicStep((1 + (SOC_1 - SOC_max)*(1/smooth_charge_percentage))));
      if SOC_tank > SOC_tank_sec then
        smooth_soc_min = cubicStep((SOC_1 - SOC_min)*(1/smooth_charge_percentage));
      else
        smooth_soc_min = cubicStep((SOC_1 - SOC_min_sec)*(1/smooth_charge_percentage));
      end if;
      previousPnet = delay(P_net, 60);
      Pdieselgenx = minLocal(P_rate_gen, maxLocal(0, dieselcall));
      P_battery_1 = minLocal(P_charging_max*smooth_soc_max, maxLocal(P_charging_min*smooth_soc_min, (P_net)*(if P_net >= 0 then smooth_soc_max else smooth_soc_min)));
      P_dieselGen = minLocal(P_rate_gen, maxLocal(0, -P_net + P_battery_1));
      P_surplus_1 = minLocal(P_rate_gen/2, P_net/2 - P_battery_1);
    algorithm
      VarPnet := P_net - previousPnet;
      if VarPnet > 1 or VarPnet < -1 then
        if SOC_1 > 0.1 then
          dieselcall := minLocal(BatteryDieselCont, -P_net);
        else
          dieselcall := -P_net;
        end if;
      else
        dieselcall := -P_net;
      end if;
      annotation(
        experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002),
        __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=NLSanalyticJacobian",
        __OpenModelica_simulationFlags(lv = "LOG_STDOUT,LOG_ASSERT,LOG_STATS", s = "dassl", variableFilter = ".*"));
    end MultiControllerCore;

    /*TranAllocator8*/

    model TransAllocator "Allocates power demand to dispatchable units"
      parameter Integer n = size(P_max, 1) "Number of dispatchable units";
      parameter Modelica.Units.SI.Power P_max[:] = {10, 1, 5} "Maximal power of the units, in decreasing priority";
      final parameter Modelica.Units.SI.Power P_max_tot = sum(P_max) "Total available power";
      Modelica.Units.SI.Power P_max_i[n] "Available power up to unit i";
      Modelica.Units.SI.Power P_unit[n] "Power of the units";
      Integer i0 "Number of required running units";
      Modelica.Blocks.Interfaces.RealInput P "Power to be allocated" annotation(
        Placement(transformation(extent = {{-120, -22}, {-80, 18}})));
      Modelica.Blocks.Interfaces.RealOutput P_out[n] "Power to the different units according to pritority list" annotation(
        Placement(transformation(extent = {{88.0, -10.0}, {108.0, 10.0}}, rotation = 0.0, origin = {0.0, 0.0})));
      Modelica.Blocks.Interfaces.RealInput SOC[n] annotation(
        Placement(transformation(extent = {{-20.0, -20.0}, {20.0, 20.0}}, origin = {-26.0, -94.0}, rotation = 90.0)));
    algorithm
// Find how many units are required to run
      i0 := 1;
      P_max_i[1] := P_max[1];
      for i in 1:n loop
        if SOC[i] > 0 then
          i0 := i;
          if i > 1 then
            P_unit[i] := P - P_unit[i - 1];
          else
            P_unit[i] := P/n;
          end if;
          if i < n then
            P_unit[i + 1:n] := zeros(n - i);
          end if;
        else
          P_unit[i] := 0;
          if i < n then
            P_max_i[i + 1] := P_max[i + 1];
          end if;
        end if;
        P_out[i] := P_unit[i]/P_max[i];
      end for;
      annotation(
        Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid), Text(extent = {{-38, 26}, {38, -30}}, lineColor = {255, 255, 255}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "A"), Text(extent = {{-100, -110}, {100, -130}}, lineColor = {0, 0, 0}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "%name")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end TransAllocator;

    extends BatteryDispatchableControlBase;
    parameter Modelica.Units.SI.Power P_rate_gen = sum(P_max) "Generator max Input";
    Modelica.Blocks.Interfaces.RealInput P_load_1 annotation(
      Placement(transformation(origin = {-120, 90}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-110, 90}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealInput SOC_1 annotation(
      Placement(transformation(origin = {-120, -70}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-110, 10}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealInput SOC_Tank annotation(
      Placement(transformation(origin = {-10, 118}, extent = {{-20, -20}, {20, 20}}, rotation = -90), iconTransformation(origin = {0, 122}, extent = {{-20, -20}, {20, 20}}, rotation = -90)));
    Modelica.Blocks.Interfaces.RealInput P_renew_1 annotation(
      Placement(transformation(origin = {-120, 10}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-110, 50}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput P_charge_1 annotation(
      Placement(transformation(origin = {110, 78}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {104, 80}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput P_discharge_1 annotation(
      Placement(transformation(origin = {110, 36}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {96, 46}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Math.Max max annotation(
      Placement(transformation(origin = {-6, 58}, extent = {{51.7311, 16.113}, {61.479, 25.8609}})));
    Modelica.Blocks.Math.Min min annotation(
      Placement(transformation(origin = {-6, 56}, extent = {{51.7311, -23.887}, {61.479, -14.1391}})));
    Modelica.Blocks.Sources.Constant const(k = 0) annotation(
      Placement(transformation(origin = {-8, 60}, extent = {{30.9926, -5.29879}, {41.747, 5.45561}})));
    Modelica.Blocks.Math.Gain gain(k = 1/(P_charging_min)) annotation(
      Placement(transformation(origin = {-20, 56}, extent = {{81.7507, -21.8674}, {87.4594, -16.1587}})));
    Modelica.Blocks.Math.Gain gain1(k = 1/(P_charging_max)) annotation(
      Placement(transformation(origin = {-20, 98}, extent = {{81.7507, -21.8674}, {87.4594, -16.1587}})));
    parameter Real SOC_tank_sec;
    parameter Real SOC_min_sec;
    Modelica.Blocks.Interfaces.RealInput TankmultipleSOC[n] annotation(
      Placement(transformation(origin = {32, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90), iconTransformation(origin = {44, -80}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
    parameter Real DieselControlforBattery;
    TransAllocator transAllocat(P_max = P_max) annotation(
      Placement(transformation(origin = {-40, -44}, extent = {{35.7202, -28.2798}, {64.2798, 0.279815}})));
    MultiControllerCore multiControllerCore1(SOC_tank_sec = SOC_tank_sec, SOC_max = SOC_max, SOC_min = SOC_min, P_charging_max = P_charging_max, SOC_min_sec = SOC_min_sec, P_rate_gen = P_rate_gen, BatteryDieselCont = DieselControlforBattery) annotation(
      Placement(transformation(origin = {-19, 24}, extent = {{-21, -20}, {21, 20}})));
  equation
    connect(P_load_1, multiControllerCore1.P_load_1) annotation(
      Line(points = {{-120, 90}, {-54, 90}, {-54, 42}, {-42, 42}}, color = {0, 0, 127}));
    connect(P_renew_1, multiControllerCore1.P_renew_1) annotation(
      Line(points = {{-120, 10}, {-70, 10}, {-70, 34}, {-42, 34}}, color = {0, 0, 127}));
    connect(SOC_1, multiControllerCore1.SOC_1) annotation(
      Line(points = {{-120, -70}, {-54, -70}, {-54, 10}, {-42, 10}}, color = {0, 0, 127}));
    connect(SOC_Tank, multiControllerCore1.SOC_tank) annotation(
      Line(points = {{-10, 118}, {-14, 118}, {-14, 56}, {-25, 56}, {-25, 48}}, color = {0, 0, 127}));
    connect(multiControllerCore1.P_battery_1, max.u1) annotation(
      Line(points = {{4, 38}, {14, 38}, {14, 82}, {45, 82}}, color = {0, 0, 127}));
    connect(multiControllerCore1.P_battery_1, min.u2) annotation(
      Line(points = {{4, 38}, {23.5, 38}, {23.5, 34}, {45, 34}}, color = {0, 0, 127}));
    connect(const.y, max.u2) annotation(
      Line(points = {{34.2847, 60.0784}, {42.2847, 60.0784}, {42.2847, 76.0784}, {44.2847, 76.0784}}, color = {0, 0, 127}));
    connect(const.y, min.u1) annotation(
      Line(points = {{34.2847, 60.0784}, {42.2847, 60.0784}, {42.2847, 40}, {45, 40}}, color = {0, 0, 127}));
    connect(max.y, gain1.u) annotation(
      Line(points = {{56, 78}, {62, 78}}, color = {0, 0, 127}));
    connect(min.y, gain.u) annotation(
      Line(points = {{56, 37}, {61, 37}}, color = {0, 0, 127}));
    connect(gain1.y, P_charge_1) annotation(
      Line(points = {{68, 79}, {110, 79}, {110, 78}}, color = {0, 0, 127}));
    connect(gain.y, P_discharge_1) annotation(
      Line(points = {{68, 36}, {110, 36}}, color = {0, 0, 127}));
    connect(multiControllerCore1.P_dieselGen, transAllocat.P) annotation(
      Line(points = {{6, 12}, {8, 12}, {8, -30}, {-20, -30}, {-20, -58}, {-4, -58}}, color = {0, 0, 127}));
    connect(transAllocat.P_out, P_dispatch) annotation(
      Line(points = {{24, -58}, {80, -58}, {80, -42}, {110, -42}}, color = {0, 0, 127}, thickness = 0.5));
    connect(TankmultipleSOC, transAllocat.SOC) annotation(
      Line(points = {{32, -120}, {6, -120}, {6, -72}}, color = {0, 0, 127}, thickness = 0.5));
    annotation(
      uses(Modelica(version = "4.0.0")));
  end MasterControllerSingleBattery;

  /*Battery Dual Control*/

  model BatteryDualControl
    //Model Repository for Local BatteryDualControl Use

    partial model BatteryBase "Battery"
      parameter Modelica.Units.SI.Energy capacity(displayUnit = "kWh", min = capacity_min, max = capacity_max) = 20*3600*1e6 "Capacity [Ws]";
      parameter Boolean capacity_free_ = false "If true, then capacity is free in the optimization" annotation(
        Dialog(group = "Design", tab = "Optimization"));
      parameter Boolean use_SOC_constraint = true "If true, SOC is constrained in the optimization" annotation(
        Dialog(group = "Constraints", tab = "Optimization"));
      parameter Real SOC_min(unit = "1") = 0.1 "Minimum State Of Charge" annotation(
        Dialog(enable = use_SOC_constraint, group = "Constraints", tab = "Optimization"));
      parameter Real SOC_max(unit = "1") = 0.9 "Maximum State Of Charge" annotation(
        Dialog(enable = use_SOC_constraint, group = "Constraints", tab = "Optimization"));
      parameter Boolean set_SOC_final_start_ = false "If true, SOC at final time equals start value" annotation(
        Dialog(group = "Constraints", tab = "Optimization"));
      parameter Modelica.Units.SI.Power P_max = 2e5 "Maximum charging rate [W]" annotation(
        Dialog(group = "Control"));
      parameter Modelica.Units.SI.Power P_min = -P_max "Maximum discharging rate [W]" annotation(
        Dialog(group = "Control"));
      parameter Real SOC_start(unit = "1") = 0.5 annotation(
        Dialog(group = "Initialization"));
      Modelica.Units.SI.Energy charge(min = SOC_min*capacity, max = SOC_max*capacity) "Battery Charge";
      Real SOC(unit = "1") "State of Charge";
      Modelica.Units.SI.Power P_out "Total power into battery storage (internal losses between storage power and connector power)";
      Modelica.Electrical.Analog.Interfaces.PositivePin p annotation(
        Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      parameter Modelica.Units.SI.Energy capacity_min = 1e-3 "Minimum capacity in the optimization" annotation(
        Dialog(enable = capacity_free_, group = "Design", tab = "Optimization"));
      parameter Modelica.Units.SI.Energy capacity_max = 200*3600*1e6 "Maximum maximum capacity in the optimization" annotation(
        Dialog(enable = capacity_free_, group = "Design", tab = "Optimization"));
      Modelica.Units.SI.Power P_loss "Power loss from (dis)charging";
    equation
      SOC*capacity = charge;
      capacity*der(SOC) = P_out;
      assert(SOC >= 0, "Error: Battery is empty in " + getInstanceName() + " at time = " + String(time), level = AssertionLevel.error);
      assert((SOC <= 1), "Error: Battery reached maximum level in " + getInstanceName() + " at time = " + String(time), level = AssertionLevel.error);
    initial equation
      SOC = SOC_start;
    end BatteryBase;

    extends BatteryBase;
    parameter Real eff_charge(unit = "1") = 0.9 "Charge effciency";
    parameter Real eff_discharge(unit = "1") = eff_charge "Discharge efficiency";
    Modelica.Blocks.Interfaces.RealInput P_charge "Charging rate [p.u.]" annotation(
      Placement(transformation(origin = {-80, 40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-80, 38}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput P_discharge "Discharging rate [p.u.]" annotation(
      Placement(transformation(origin = {-80, -40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-80, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Units.SI.Power P_charge_abs "Denormalized charging rate";
    Modelica.Units.SI.Power P_discharge_abs "Denormalized charging rate";
  equation
    P_charge_abs = P_charge*(P_max - 0) + 0;
    P_discharge_abs = P_discharge*(-P_min - 0) + 0;
    P_loss = (1 - eff_charge)*P_charge_abs + (1/eff_discharge - 1)*P_discharge_abs;
    P_out = P_charge_abs - P_discharge_abs - P_loss;
    p.i*p.v = P_charge_abs - P_discharge_abs;
    annotation(
      uses(Modelica(version = "4.0.0")),
      Icon(graphics = {Rectangle(origin = {4, -6}, fillPattern = FillPattern.VerticalCylinder, lineThickness = 1.25, extent = {{-54, 48}, {54, -48}}, radius = 4), Rectangle(origin = {-19, 51}, extent = {{-15, 7}, {15, -7}}), Rectangle(origin = {-19, 51}, lineThickness = 3, extent = {{-15, 7}, {15, -7}}, radius = 2), Rectangle(origin = {23, 51}, lineThickness = 3, extent = {{-15, 7}, {15, -7}}, radius = 3)}),
      Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})));
  end BatteryDualControl;

  /*ElectricalLoad*/

  model ElectricLoad
    //Connects Pin_AC used by ElectricLoad

    connector Pin_AC "Pin of an electrical component"
      Modelica.Units.SI.Voltage v "Potential at the pin" annotation(
        unassignedMessage = "An electrical potential cannot be uniquely calculated.
    The reason could be that
    - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
      to define the zero potential of the electrical circuit, or
    - a connector of an electrical component is not connected.");
      flow Modelica.Units.SI.Current i "Current flowing into the pin" annotation(
        unassignedMessage = "An electrical current cannot be uniquely calculated.
    The reason could be that
    - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
      to define the zero potential of the electrical circuit, or
    - a connector of an electrical component is not connected.");
      annotation(
        defaultComponentName = "pin",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Ellipse(extent = {{100, 100}, {-100, -100}}, lineColor = {0, 140, 72}, fillColor = {0, 140, 72}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}})));
    end Pin_AC;

    parameter Boolean use_input = true "If true, load is an input";
    input Real load_in = 0 "Load by input in [W], only used if use_input is false" annotation(
      Dialog(enable = (not use_input)));
    Modelica.Blocks.Interfaces.RealOutput P_load "Connector of Real output signal" annotation(
      Placement(transformation(extent = {{100, 50}, {120, 70}})));
    Pin_AC n annotation(
      Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
    Modelica.Blocks.Interfaces.RealInput P if use_input annotation(
      Placement(transformation(extent = {{-120, -16}, {-80, 24}})));
  protected
    Modelica.Blocks.Sources.RealExpression realExpression(y = load_in) if not use_input annotation(
      Placement(transformation(extent = {{-100, 74}, {-80, 94}})));
  equation
    n.i = P_load/n.v;
    connect(realExpression.y, P_load) annotation(
      Line(points = {{-79, 84}, {12, 84}, {12, 60}, {110, 60}}, color = {0, 0, 127}));
    connect(P, P_load) annotation(
      Line(points = {{-100, 4}, {12, 4}, {12, 60}, {110, 60}}, color = {0, 0, 127}));
    annotation(
      Placement(transformation(extent = {{-120, -12}, {-80, 30}})),
      Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, radius = 20), Rectangle(extent = {{-60, -24}, {56, -62}}, lineColor = {175, 175, 175}, fillColor = {175, 175, 175}, fillPattern = FillPattern.Solid, radius = 20), Rectangle(extent = {{-60, 14}, {56, -44}}, lineColor = {175, 175, 175}, fillColor = {175, 175, 175}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-80, 28}, {76, 6}}, lineColor = {175, 175, 175}, fillColor = {175, 175, 175}, fillPattern = FillPattern.Solid, radius = 10), Rectangle(extent = {{-31, 8}, {31, -8}}, lineColor = {0, 128, 255}, fillColor = {175, 175, 175}, fillPattern = FillPattern.Solid, radius = 10, origin = {-28, 51}, rotation = 90, pattern = LinePattern.None), Rectangle(extent = {{-31, 8}, {31, -8}}, lineColor = {175, 175, 175}, fillColor = {175, 175, 175}, fillPattern = FillPattern.Solid, radius = 10, origin = {28, 51}, rotation = 90), Text(extent = {{-100, -110}, {100, -130}}, lineColor = {0, 0, 0}, fillColor = {175, 175, 175}, fillPattern = FillPattern.Solid, textString = "%name")}),
      Diagram(coordinateSystem(preserveAspectRatio = false)));
  end ElectricLoad;

  /*ElectricalGrid*/

  model ElectricalGrid
    //Model Repository for Local ElectricalGrid use

    model ElectricGrid_base
      partial model TemplateSource_AC
        //Pin_AC used by TemplateSource_AC

        connector Pin_AC "Pin of an electrical component"
          Modelica.Units.SI.Voltage v "Potential at the pin" annotation(
            unassignedMessage = "An electrical potential cannot be uniquely calculated.
        The reason could be that
        - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
          to define the zero potential of the electrical circuit, or
        - a connector of an electrical component is not connected.");
          flow Modelica.Units.SI.Current i "Current flowing into the pin" annotation(
            unassignedMessage = "An electrical current cannot be uniquely calculated.
        The reason could be that
        - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
          to define the zero potential of the electrical circuit, or
        - a connector of an electrical component is not connected.");
          annotation(
            defaultComponentName = "pin",
            Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Ellipse(extent = {{100, 100}, {-100, -100}}, lineColor = {0, 140, 72}, fillColor = {0, 140, 72}, fillPattern = FillPattern.Solid)}),
            Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}})));
        end Pin_AC;

        parameter Modelica.Units.SI.Voltage V_ref(displayUnit = "kV") = 20e3 "Grid reference AC voltage";
        parameter Boolean use_V_in = false "If true, voltage is an input" annotation(
          choices(checkBox = true),
          Dialog(tab = "Interfaces", group = "Inputs"));
        Modelica.Units.SI.Power P_out "Power output from grid";
        Pin_AC p annotation(
          Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
        Modelica.Blocks.Interfaces.RealInput V_in if use_V_in annotation(
          Placement(transformation(extent = {{126, 26}, {86, 66}})));
      protected
        Modelica.Blocks.Interfaces.RealOutput V_set_node annotation(
          Placement(transformation(extent = {{6, 64}, {-14, 84}})));
        Modelica.Blocks.Sources.RealExpression V_parameter(y = 20000) if not use_V_in annotation(
          Placement(transformation(extent = {{74, 58}, {42, 90}})));
      equation
        p.v = V_set_node;
        P_out = -p.v*p.i;
        connect(V_parameter.y, V_set_node) annotation(
          Line(points = {{40, 74}, {-4, 74}}, color = {0, 0, 127}));
        connect(V_in, V_set_node) annotation(
          Line(points = {{106, 46}, {24, 46}, {24, 74}, {-4, 74}}, color = {0, 0, 127}));
      end TemplateSource_AC;

      // Function max_approx used by ElectricGrid_base

      function max_approx "Max function approximation with continuous derivatives"
        input Real u1 "Argument 1";
        input Real u2 "Argument 2";
        input Real du = 0.1 "Smoothing interval, active when u1-u2 is within +/- 0.5*du";
        output Real y "max(u1,u2)";
      protected
        Real uu = -(u1 - u2)/du + 0.5 "Normalized position in smoothing interval";
      algorithm
        y := -du*noEvent(if uu < 0 then uu - 0.5 else (if uu > 1 then 0 else uu*(1 - uu*uu + 0.5*uu^3) - 0.5)) + u2;
      end max_approx;

      // Function min_approx used by ElectricGrid_base

      function min_approx "Min function approximation with continuous deriatives"
        input Real u1 "Argument 1";
        input Real u2 "Argument 2";
        input Real du = 0.1 "Smoothing interval, active when u1-u2 is within +/- 0.5*du";
        output Real y "min(u1,u2)";
      protected
        Real uu = (u1 - u2)/du + 0.5 "Normalized position in smoothing interval";
      algorithm
        y := u2 + du*noEvent(if uu < 0 then uu - 0.5 else (if uu > 1 then 0 else uu*(1 - uu*uu + 0.5*uu^3) - 0.5));
      end min_approx;

      //Repsostroy End
      type PerPower = Real(final quantity = "PerPower");
      type PerPower_PerkW = PerPower(final unit = "1/kW");
      //Properties of ElectricGrid_base
      extends TemplateSource_AC;
      parameter Real factor_sellprice = 1 "Quota between sell price and purchase price" annotation(
        Dialog(tab = "Economy"));
      parameter PerPower_PerkW gridPrice = 1 "Electric grid price in [1/kWh], only used if use_price_input is false" annotation(
        Dialog(tab = "Economy"));
      parameter Boolean use_price_input = true "Use input for electric grid price" annotation(
        choices(checkBox = true),
        Dialog(tab = "Interfaces", group = "Inputs"));
      parameter Modelica.Units.SI.Power power_nominal = 1e5 "Nominal power, for smoothing purposes" annotation(
        Dialog(tab = "Numerics"));
      Modelica.Blocks.Interfaces.RealOutput current_price "Current electrical price from grid" annotation(
        Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-46, 110}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-46, 110})));
      Real opex "Operational cost, per second";
      Modelica.Blocks.Interfaces.RealInput price if use_price_input annotation(
        Placement(transformation(extent = {{126, -20}, {86, 20}})));
    protected
      parameter Modelica.Units.SI.Power power_threshold = power_nominal/100;
      Modelica.Blocks.Sources.RealExpression price_parameter(y = gridPrice) if not use_price_input annotation(
        Placement(transformation(extent = {{2, 12}, {-34, 42}})));
    equation
      opex = (current_price*max_approx(P_out - power_threshold/2, 0, power_threshold))/3600/1000 + (min_approx(P_out + power_threshold/2, 0, power_threshold)*current_price*factor_sellprice)/3600/1000;
      connect(price_parameter.y, current_price) annotation(
        Line(points = {{-35.8, 27}, {-46, 27}, {-46, 110}}, color = {0, 0, 127}));
      connect(price, current_price) annotation(
        Line(points = {{106, 0}, {-46, 0}, {-46, 110}}, color = {0, 0, 127}));
    end ElectricGrid_base;

    model OptimizationConstraint "Block for time-invariant inequality constraints in the optimization"
      parameter Boolean exp_constraint_active = true "Use this parameter to turn on and off the constraint";
      parameter Real min_val = -Modelica.Constants.inf "Minimum value of exp" annotation(
        Dialog(group = "Constraining values"));
      parameter Real max_val = Modelica.Constants.inf "Maximum value of exp" annotation(
        Dialog(group = "Constraining values"));
      input Real exp(min = if exp_constraint_active then min_val else -Modelica.Constants.inf, max = if exp_constraint_active then max_val else Modelica.Constants.inf) "Expression to be constrained" annotation(
        Dialog(group = "Expression", enable = exp_constraint_active));
    equation
      if exp_constraint_active then
        assert(exp >= min_val, "Minimum constraint violated in " + getInstanceName() + " at t=" + String(time) + ": Adjust the constraint or control strategy to ensure the problem is feasible", level = AssertionLevel.warning);
        assert(exp <= max_val, "Maximum constraint violated in " + getInstanceName() + " at t=" + String(time) + ": Adjust the constraint or control strategy to ensure the problem is feasible", level = AssertionLevel.warning);
      end if;
      annotation(
        defaultComponentName = "constraint_",
        Icon(graphics = {Rectangle(extent = {{-100, 40}, {100, -40}}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid), Text(extent = {{-80, 40}, {80, -40}}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "Constraint"), Text(extent = {{-112, 32}, {112, -32}}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "%name", origin = {-2, 58})}));
    end OptimizationConstraint;

    //Properties of ElectricalGrid
    extends ElectricGrid_base(V_parameter(y = 20000));
    OptimizationConstraint constraint_importExport(exp = P_out, min_val = -P_export_max, max_val = P_import_max) if use_power_constraints annotation(
      Placement(transformation(extent = {{26, -46}, {46, -26}})));
    parameter Modelica.Units.SI.Power P_peak = 1e9 "Peak power over time horizon (used in optimization)" annotation(
      Dialog(group = "Power peak", tab = "Optimization", enable = false));
    parameter Boolean P_peak_free_ = false "If true, then power peak is free in the optimization" annotation(
      Dialog(group = "Power peak", tab = "Optimization"));
    parameter Boolean use_power_constraints = false "If true, power import/export is constrained in the optimization" annotation(
      Dialog(group = "Import/export constraints", tab = "Optimization"));
    parameter Modelica.Units.SI.Power P_export_max = Modelica.Constants.inf "Maximal power export" annotation(
      Dialog(enable = use_power_constraints, group = "Import/export constraints", tab = "Optimization"));
    parameter Modelica.Units.SI.Power P_import_max = Modelica.Constants.inf "Maximal power import" annotation(
      Dialog(enable = use_power_constraints, group = "Import/export constraints", tab = "Optimization"));
  equation

  end ElectricalGrid;

  /*Converter_ACDC*/

  model Converter_ACDC
    // Converter component used by Converter ACDC

    partial model Converter
      type Time_yr = Real(final quantity = "Time", final unit = "yr");
      type PerPower = Real(final quantity = "PerPower");
      type PerPower_PerkW = PerPower(final unit = "1/kW");
      type PerPowerTime = Real(final quantity = "perPowerTime");
      type PerPowerTime_PerkWyr = PerPowerTime(final unit = "1/(kW.yr)");

      function sign_approx "Sign function with C2-continuous approximation "
        input Real u "Variable to take sign of";
        input Real eps = 1e-3 "Smoothing epsilon";
        output Real y "Approximated sign(u)";
      algorithm
        y := u/sqrt(u^2 + eps^2);
      end sign_approx;

      function heaviside_approx "Heaviside step function with C2-continuous approximation "
        input Real u "Variable to take Heaviside of";
        input Real eps = 1e-3 "Smoothing epsilon";
        output Real y "Approximated heaviside(u)";
      algorithm
        y := (sign_approx(u, eps) + 1)/2;
      end heaviside_approx;

      parameter Real efficiency = 0.99 "Effciency";
      parameter Modelica.Units.SI.Power P_max = 2e5 "Maximum source power [W]";
      parameter Boolean P_max_free_ = false "If true then P_max is a design parameter";
      Modelica.Units.SI.Power power_prim(start = 0, max = P_max, min = -P_max);
      Modelica.Units.SI.Power power_sec(start = 0, max = P_max, min = -P_max);
      Modelica.Units.SI.Power loss;
      parameter Time_yr lifetime = 10 "Expected lifetime [yr]";
      parameter PerPower_PerkW capex_p = 0 "CAPEX per maximum power [kW]";
      parameter PerPowerTime_PerkWyr fixed_opex_p = 0 "OPEX per kW per year [1/(kWyr)]";
      parameter Modelica.Units.SI.Power power_nominal = 1e6 "nominal power, for smoothing purpose ";
    equation
      loss = (1 - efficiency)*power_prim*heaviside_approx(power_prim, power_nominal/50) + (1 - efficiency)*power_sec*heaviside_approx(power_sec, power_nominal/50);
      power_prim + power_sec = loss;
    end Converter;

    //DefaultFlow Component used by Converter_ACDC

    model DefaultFlow
      type DefaultFlowPosition = enumeration(NONE, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, EAST80, WEST80, EAST60, WEST60);
      parameter DefaultFlowPosition defaultFlow = if set_DC_voltage then DefaultFlowPosition.WEST80 else DefaultFlowPosition.EAST80 "Position of the connector that provides the flow that is being externally defined";
    end DefaultFlow;

    //Pin_AC Connecters used by Converter_ACDC

    connector Pin_AC "Pin of an electrical component"
      Modelica.Units.SI.Voltage v "Potential at the pin" annotation(
        unassignedMessage = "An electrical potential cannot be uniquely calculated.
    The reason could be that
    - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
      to define the zero potential of the electrical circuit, or
    - a connector of an electrical component is not connected.");
      flow Modelica.Units.SI.Current i "Current flowing into the pin" annotation(
        unassignedMessage = "An electrical current cannot be uniquely calculated.
    The reason could be that
    - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
      to define the zero potential of the electrical circuit, or
    - a connector of an electrical component is not connected.");
      annotation(
        defaultComponentName = "pin",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Ellipse(extent = {{100, 100}, {-100, -100}}, lineColor = {0, 140, 72}, fillColor = {0, 140, 72}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}})));
    end Pin_AC;

    //eleIn Connecters used by Converter_ACDC

    connector elecIn "Electrical reference values received through connector"
      connector RealConnector = Real "'Real' as connector" annotation(
        defaultComponentName = "u",
        Icon(graphics = {Rectangle(extent = {{100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100.0, -100.0}, {100.0, 100.0}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100.0, -100.0}, {100.0, 100.0}}), graphics = {Text(lineColor = {0, 0, 127}, extent = {{-10.0, 60.0}, {-10.0, 85.0}}, textString = "%name"), Rectangle(extent = {{100, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}));
      // Maximum power point performances
      input RealConnector i_mp(final quantity = "ElectricCurrent", final unit = "A") "Maximum power point current";
      input RealConnector v_mp(final quantity = "ElectricPotential", final unit = "V") "Maximum power point voltage";
      input RealConnector P_mp(final quantity = "Power", final unit = "W") "Maximum power point power";
      // Actual power
      input RealConnector P(final quantity = "Power", final unit = "W") "Actual power";
      annotation(
        Icon(coordinateSystem(initialScale = 0.2), graphics = {Ellipse(extent = {{-10, 10}, {10, -10}}, lineColor = {0, 0, 0}, lineThickness = 0.5), Ellipse(extent = {{-50, 50}, {50, -50}}, lineColor = {95, 95, 95}, fillColor = {95, 95, 95}, fillPattern = FillPattern.Solid, lineThickness = 0.5), Ellipse(extent = {{-40, 40}, {40, -40}}, lineColor = {95, 95, 95}, fillColor = {255, 204, 51}, fillPattern = FillPattern.Solid, lineThickness = 0.5), Polygon(points = {{-20, 80}, {20, 80}, {0, 44}, {-20, 80}}, lineColor = {95, 95, 95}, fillColor = {95, 95, 95}, fillPattern = FillPattern.Solid, lineThickness = 0.5)}),
        Diagram(coordinateSystem(initialScale = 0.2)));
    end elecIn;

    type DefaultFlowPosition = enumeration(NONE, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, EAST80, WEST80, EAST60, WEST60);
    //properties belongs to Converter
    extends Converter;
    //properties belongs to DefaultFlow
    final DefaultFlowPosition defaultFlow = if set_DC_voltage then DefaultFlowPosition.WEST80 else DefaultFlowPosition.EAST80;
    //properties belongs to Converter_ACDC
    parameter Boolean set_DC_voltage = true "If true, voltage will be set at DC pin";
    parameter Modelica.Units.SI.Voltage V_ref_DC = 48 "Reference DC source voltage on DC pin" annotation(
      Dialog(enable = not use_V_in and not set_DC_voltage));
    parameter Modelica.Units.SI.Voltage V_ref_AC = 48 "Reference AC source voltage on AC pin" annotation(
      Dialog(enable = not use_V_in and not set_DC_voltage));
    parameter Boolean use_V_in = false "if true, DC voltage is an input" annotation(
      choices(checkBox = true),
      Dialog(tab = "Interfaces", group = "Inputs"));
    parameter Boolean use_pvInfo = false "true to set the voltage through pVInfo, false for connecting Real signal" annotation(
      choices(checkBox = true),
      Dialog(tab = "Interfaces", group = "Inputs"));
    Pin_AC pin_AC annotation(
      Placement(transformation(extent = {{70, -10}, {90, 10}}), iconTransformation(extent = {{70, -10}, {90, 10}})));
    Modelica.Electrical.Analog.Interfaces.NegativePin pin_DC annotation(
      Placement(transformation(extent = {{-90, -10}, {-70, 10}}), iconTransformation(extent = {{-90, -10}, {-70, 10}})));
    Modelica.Blocks.Sources.RealExpression realExpression(y = if set_DC_voltage then V_ref_DC else V_ref_AC) if not use_V_in annotation(
      Placement(transformation(origin = {0, -6}, extent = {{-92, 82}, {-72, 102}})));
    Modelica.Blocks.Interfaces.RealInput V_in if (not use_pvInfo) and (use_V_in) "Voltage setpint, DC if set_DC_voltage ==true, else AC voltage" annotation(
      Placement(transformation(extent = {{-20.0, -20.0}, {20.0, 20.0}}, rotation = -90.0, origin = {2, 112}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = -90, origin = {4, 80})));
    elecIn pVInfo if use_pvInfo and use_V_in "PhotoVoltaic information through port" annotation(
      Placement(transformation(origin = {-4.8, 12.3}, extent = {{-27.2, 35.7}, {6.8, 69.7}}), iconTransformation(extent = {{-32, 42}, {8, 82}})));
  protected
    Modelica.Blocks.Interfaces.RealInput V_node "DC Voltage used" annotation(
      Placement(transformation(origin = {24, 38}, extent = {{-20, -20}, {20, 20}}, rotation = -90), iconTransformation(origin = {26, 40}, extent = {{-20, -20}, {20, 20}}, rotation = -90)));
  equation
    if set_DC_voltage then
      pin_DC.v = V_node;
    else
      pin_AC.v = V_node;
    end if;
    power_prim = pin_AC.v*pin_AC.i;
    power_sec = pin_DC.v*pin_DC.i;
    connect(V_node, V_in) annotation(
      Line(points = {{24, 38}, {24, 78}, {2, 78}, {2, 112}}, color = {0, 0, 127}));
    connect(V_node, pVInfo.v_mp) annotation(
      Line(points = {{24, 38}, {24, 78}, {-22, 78}, {-22, 65}, {-15, 65}}, color = {0, 0, 127}));
    connect(realExpression.y, V_node) annotation(
      Line(points = {{-71, 86}, {-38, 86}, {-38, 38}, {24, 38}}, color = {0, 0, 127}));
    annotation(
      Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Rectangle(extent = {{-80, 60}, {80, -60}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, radius = 5), Line(points = {{-74, -56}, {76, 56}}, color = {0, 0, 0}), Text(extent = {{4, -10}, {84, -50}}, lineColor = {0, 140, 72}, textString = "~"), Text(extent = {{-86, 56}, {-6, 16}}, lineColor = {0, 0, 255}, textString = "="), Text(extent = {{-80, -66}, {80, -80}}, lineColor = {0, 0, 0}, textString = "%name")}),
      Diagram(coordinateSystem(preserveAspectRatio = false)));
  end Converter_ACDC;

  /*Transformer*/

  model Transformer
    partial model Converter
      type Time_yr = Real(final quantity = "Time", final unit = "yr");
      type PerPower = Real(final quantity = "PerPower");
      type PerPower_PerkW = PerPower(final unit = "1/kW");
      type PerPowerTime = Real(final quantity = "perPowerTime");
      type PerPowerTime_PerkWyr = PerPowerTime(final unit = "1/(kW.yr)");

      function sign_approx "Sign function with C2-continuous approximation "
        input Real u "Variable to take sign of";
        input Real eps = 1e-3 "Smoothing epsilon";
        output Real y "Approximated sign(u)";
      algorithm
        y := u/sqrt(u^2 + eps^2);
      end sign_approx;

      function heaviside_approx "Heaviside step function with C2-continuous approximation "
        input Real u "Variable to take Heaviside of";
        input Real eps = 1e-3 "Smoothing epsilon";
        output Real y "Approximated heaviside(u)";
      algorithm
        y := (sign_approx(u, eps) + 1)/2;
      end heaviside_approx;

      parameter Real efficiency = 0.99 "Effciency";
      parameter Modelica.Units.SI.Power P_max = 2e5 "Maximum source power [W]";
      parameter Boolean P_max_free_ = false "If true then P_max is a design parameter";
      Modelica.Units.SI.Power power_prim(start = 0, max = P_max, min = -P_max);
      Modelica.Units.SI.Power power_sec(start = 0, max = P_max, min = -P_max);
      Modelica.Units.SI.Power loss;
      parameter Time_yr lifetime = 10 "Expected lifetime [yr]";
      parameter PerPower_PerkW capex_p = 0 "CAPEX per maximum power [kW]";
      parameter PerPowerTime_PerkWyr fixed_opex_p = 0 "OPEX per kW per year [1/(kWyr)]";
      parameter Modelica.Units.SI.Power power_nominal = 1e6 "nominal power, for smoothing purpose ";
    equation
      loss = (1 - efficiency)*power_prim*heaviside_approx(power_prim, power_nominal/50) + (1 - efficiency)*power_sec*heaviside_approx(power_sec, power_nominal/50);
      power_prim + power_sec = loss;
    end Converter;

    model DefaultFlow
      type DefaultFlowPosition = enumeration(NONE, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, EAST80, WEST80, EAST60, WEST60);
      parameter DefaultFlowPosition defaultFlow = if set_DC_voltage then DefaultFlowPosition.WEST80 else DefaultFlowPosition.EAST80 "Position of the connector that provides the flow that is being externally defined";
    end DefaultFlow;

    connector Pin_AC "Pin of an electrical component"
      Modelica.Units.SI.Voltage v "Potential at the pin" annotation(
        unassignedMessage = "An electrical potential cannot be uniquely calculated.
    The reason could be that
    - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
      to define the zero potential of the electrical circuit, or
    - a connector of an electrical component is not connected.");
      flow Modelica.Units.SI.Current i "Current flowing into the pin" annotation(
        unassignedMessage = "An electrical current cannot be uniquely calculated.
    The reason could be that
    - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
      to define the zero potential of the electrical circuit, or
    - a connector of an electrical component is not connected.");
      annotation(
        defaultComponentName = "pin",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Ellipse(extent = {{100, 100}, {-100, -100}}, lineColor = {0, 140, 72}, fillColor = {0, 140, 72}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}})));
    end Pin_AC;

    // Propertied belongs to Transformer
    extends Converter;
    Pin_AC pin_prim annotation(
      Placement(transformation(extent = {{-10.0, 90.0}, {10.0, 110.0}}, rotation = 0.0, origin = {0.0, 0.0})));
    Pin_AC pin_sec annotation(
      Placement(transformation(extent = {{-10.0, -110.0}, {10.0, -90.0}}, rotation = 0.0, origin = {0.0, 0.0})));
    parameter Modelica.Units.SI.Voltage V_ref = 48 "Reference AC source voltage on secondary pin.";
  equation
    pin_sec.v = V_ref;
    power_prim = pin_prim.v*pin_prim.i;
    power_sec = pin_sec.v*pin_sec.i;
    annotation(
      Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Text(extent = {{-100, 10}, {100, -10}}, lineColor = {0, 0, 0}, textString = "%name", origin = {-82, 0}, rotation = 90), Rectangle(extent = {{-60, -80}, {60, -94}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-54, 40}, {54, -68}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Polygon(points = {{-6, 22}, {12, 22}, {4, -2}, {26, -2}, {-2, -44}, {2, -14}, {-20, -14}, {-6, 22}}, lineColor = {255, 255, 255}, pattern = LinePattern.None, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-6, 84}, {6, 46}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-10, 56}, {10, 52}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-10, 68}, {10, 62}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-10, 78}, {10, 74}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-50, 78}, {-30, 74}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-50, 68}, {-30, 62}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-50, 56}, {-30, 52}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-46, 84}, {-34, 46}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{34, 84}, {46, 46}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{30, 56}, {50, 52}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{30, 68}, {50, 62}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Rectangle(extent = {{30, 78}, {50, 74}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid)}),
      Diagram(coordinateSystem(preserveAspectRatio = false)));
  end Transformer;

  /*Fuel*/

  package Fuel
    // External Model Repository for Local Use
    /*SimpleFuel*/

    package Templates
      package SimpleFuel
        //      extends Modelon.Icons.Record;
        constant Modelica.Units.SI.SpecificEnergy LHV = 1 "Lower Heating value";
        constant Modelica.Units.SI.Density rho = 1 "Density";
        constant Modelica.Units.SI.Density rho_liq = 1 "Density";
        constant Modelica.Units.SI.MassFraction carbonContent = 1 "kg carbon per kg fuel";
        constant .Modelica.Units.SI.MolarMass MolarMass = 1 "Molar mass of fuel";
        constant Modelica.Units.SI.MolarEnergy Delta_h_evap = 1 "Molar evaporation enthalpy";
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {95, 95, 95}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{100, 20}, {40, 22}, {34, 34}, {-12, 24}, {-10, 16}, {-42, -2}, {-82, -52}, {-72, -58}, {-30, -10}, {-6, -2}, {16, -30}, {82, -48}, {82, 0}, {100, -2}, {100, 20}}, pattern = LinePattern.None, fillColor = {95, 95, 95}, fillPattern = FillPattern.Solid, lineColor = {0, 0, 0}), Polygon(points = {{72, 0}, {34, 6}, {16, -4}, {22, -12}, {36, -6}, {72, -22}, {72, 0}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{28, -20}, {36, -14}, {70, -30}, {28, -20}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = false)),
          Documentation(revisions = "<html>
                Copyright &copy; 2004-2024, MODELON AB <br /> The use of this software component is regulated by the licensing conditions for Modelon Libraries. <br />This copyright notice must, unaltered, accompany all components that are derived from, copied from, <br />or by other means have their origin from any Modelon Library.
                </html>", info = "<html>
                Base record for fuel properties.
                </html>"));
      end SimpleFuel;
    end Templates;

    /*CompressedHydrogen*/

    package compressedhydrogen
      extends MasterModel_SA5_ParameterExp.Fuel.MethanolFuel(LHV = 120e6, rho = 26, rho_liq = 26, MolarMass = 1.00899e-3, Delta_h_evap = 2.01588*1e-3);
    end compressedhydrogen;

    /*Diesel*/

    package Diesel "Diesel fuel properties"
      extends Fuel.Templates.SimpleFuel(carbonContent = 0.86, LHV = 44e6, rho = 820, rho_liq = 820, MolarMass = 0.233, Delta_h_evap = 400e3*MolarMass);
    end Diesel;

    /*Methanol Fuel*/

    package MethanolFuel "Methanol Fuel for diesel engine"
      extends Fuel.Diesel(carbonContent = 0, LHV = 20.1e6, rho_liq = 791.4, rho = 791.4, MolarMass = 32.04e-3, Delta_h_evap = 715000);
    end MethanolFuel;

    /*NatualGas*/

    package NaturalGas "Methan / Natural  Gas fuel properties"
      extends Fuel.Templates.SimpleFuel(carbonContent = 0.75, LHV = 47e6, rho = 0.78, rho_liq = 422.6, MolarMass = 16.0425e-3, Delta_h_evap = 508.82e3*MolarMass);
    end NaturalGas;

    /*Hydrogen*/

    package Hydrogen "Hydrogen fuel properties"
      extends Fuel.Templates.SimpleFuel(carbonContent = 0, LHV = 120e6, rho = 0.08988, rho_liq = 70.85, MolarMass = 2.01588*1e-3, Delta_h_evap = 0.9e3);
    end Hydrogen;

    /*CarbonDioxide*/

    package CarbonDioxide "Carbon Dioxide fuel properties"
      extends Fuel.Templates.SimpleFuel(carbonContent = 12/44, LHV = 0, rho = 1.977, rho_liq = 1101, MolarMass = 44.009*1e-3, Delta_h_evap = 179.5e3*MolarMass);
    end CarbonDioxide;

    // Repositroy end Fuel
    annotation(
      Diagram,
      Icon(graphics = {Bitmap(origin = {2, 2}, rotation = 180, extent = {{-100, 140}, {100, -140}}, imageSource = "")}));
  end Fuel;

  /*Generator*/

  model Generator
    //External Model Repositroy for Local Generator USe
    /*Generator_Base*/

    model Generator_Base
      // External Model and packge Repository for Local Generator_Base use
      /*DefaultFlow*/

      model DefaultFlow
        type DefaultFlowPosition = enumeration(NONE, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, EAST80, WEST80, EAST60, WEST60);
        parameter DefaultFlowPosition defaultFlow = DefaultFlowPosition.NONE "Position of the connector that provides the flow that is being externally defined";
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100.0, -100.0}, {100.0, 100.0}}), graphics = {Rectangle(origin = {0, 100}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = defaultFlow == DefaultFlowPosition.NORTH), Rectangle(origin = {100, 100}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.NORTHEAST)), Rectangle(origin = {100, 0}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.EAST)), Rectangle(origin = {100, -100}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.SOUTHEAST)), Rectangle(origin = {0, -100}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.SOUTH)), Rectangle(origin = {-100, -100}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.SOUTHWEST)), Rectangle(origin = {-100, 0}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.WEST)), Rectangle(origin = {-100, 100}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.NORTHWEST)), Rectangle(origin = {80, 0}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.EAST80)), Rectangle(origin = {-80, 0}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.WEST80)), Rectangle(origin = {60, 0}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.EAST60)), Rectangle(origin = {-60, 0}, extent = {{13, 13}, {-13, -13}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, visible = (defaultFlow == DefaultFlowPosition.WEST60))}));
      end DefaultFlow;

      /*Fuel*/
      // Current reside in Generator model due to  scoping reaasons
      /*VloumnFlowRate*/
      type VolumeFlowRate_lperh = Real(quantity = "VolumeFlowRate", final unit = "l/h");
      /*MassFlowRate*/
      type MassFlowRate_kgperh = Real(quantity = "MassFlowRate", final unit = "kg/h");
      /*Converstion from_lperh*/

      function from_lperh "From l/h to m3/s"
        extends Modelica.Units.Icons.Conversion;
        input VolumeFlowRate_lperh lperh;
        output Modelica.Units.SI.VolumeFlowRate m3pers;
      algorithm
        m3pers := lperh/3600/1000;
      end from_lperh;

      /*Converstion from_kgperh*/

      function from_kgperh "From kg/h to kg/s"
        extends Modelica.Units.Icons.Conversion;
        input MassFlowRate_kgperh kgperh;
        output Modelica.Units.SI.MassFlowRate kgpers;
      algorithm
        kgpers := kgperh/3600;
      end from_kgperh;

      /*PerVolume*/
      type PerVolume = Real(final quantity = "PerVolume");
      /*PerPowerTime*/
      type PerPowerTime = Real(final quantity = "PerPowerTime");
      /*PerPower*/
      type PerPower = Real(final quantity = "PerPower");
      /*Time_yr*/
      type Time_yr = Real(final quantity = "Time", final unit = "yr");
      /*PerPower_PerkW*/
      type PerPower_PerkW = PerPower(final unit = "1/kW");
      /*PerPowerTime_PerkWyr*/
      type PerPowerTime_PerkWyr = PerPowerTime(final unit = "1/(kW.yr)");
      /*PerVolume_l*/
      type PerVolume_l = PerVolume(final unit = "1/l");
      /*Modelon.Units.Conversions.Null*/

      function Null "Null conversion"
        extends Modelica.Units.Icons.Conversion;
        input Real inPut "input value";
        output Real outPut "output value";
      algorithm
        outPut := inPut;
      end Null;

      /*Modelon conversion_from_kgph*/

      block Conversion "Conversion between SI and non-SI units"
        extends Modelica.Blocks.Interfaces.PartialConversionBlock;
        replaceable function conversion = Null constrainedby Modelica.Units.Icons.Conversion "Conversion function" annotation(
           choicesAllMatching);
      equation
        y = conversion(u);
      end Conversion;

      /*Heat Port a*/

      connector HeatPort_a "Heat flow connector with outlined icon"
        extends Modelica.Thermal.HeatTransfer.Interfaces.HeatPort;
        annotation(
          defaultComponentName = "port_a",
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(extent = {{-80, 80}, {80, -80}}, lineColor = {191, 0, 0}, fillColor = {191, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-100, 120}, {100, 80}}, lineColor = {191, 0, 0}, textString = "%name")}),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {191, 0, 0}, fillColor = {191, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-98, 196}, {102, 102}}, lineColor = {191, 0, 0}, textString = "%name")}));
      end HeatPort_a;

      /*Fluid Port*/

      connector FluidPort "Fluid port for low fidelity models in microgrid components"
        replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.Hydrogen constrainedby MasterModel_SA5_ParameterExp.Fuel.SimpleFuel "Transported medium";
        Modelica.Units.SI.Pressure p "Pressure";
        flow Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate";
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end FluidPort;

      /*pin_AC*/

      connector Pin_AC "Pin of an electrical component"
        Modelica.Units.SI.Voltage v "Potential at the pin" annotation(
          unassignedMessage = "An electrical potential cannot be uniquely calculated.
      The reason could be that
      - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
        to define the zero potential of the electrical circuit, or
      - a connector of an electrical component is not connected.");
        flow Modelica.Units.SI.Current i "Current flowing into the pin" annotation(
          unassignedMessage = "An electrical current cannot be uniquely calculated.
      The reason could be that
      - a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)
        to define the zero potential of the electrical circuit, or
      - a connector of an electrical component is not connected.");
        annotation(
          defaultComponentName = "pin",
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Ellipse(extent = {{100, 100}, {-100, -100}}, lineColor = {0, 140, 72}, fillColor = {0, 140, 72}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}})));
      end Pin_AC;

      /*cubicStep*/

      function cubicStep "Cubic step function"
        input Real tau "Abcissa";
        output Real y "Value";
      algorithm
        y := if tau < 0 then 0 else (if tau > 1 then 1 else (3 - 2*tau)*tau^2);
      end cubicStep;

      /*signApprox*/

      function sign_approx "Sign function with C2-continuous approximation "
        input Real u "Variable to take sign of";
        input Real eps = 1e-3 "Smoothing epsilon";
        output Real y "Approximated sign(u)";
      algorithm
        y := u/sqrt(u^2 + eps^2);
      end sign_approx;

      // Repository End
      extends DefaultFlow(final defaultFlow = if use_P_in then DefaultFlow.DefaultFlowPosition.NONE else DefaultFlow.DefaultFlowPosition.WEST);
      parameter Boolean P_rat_free = false "If true, rated power P-rat is free(requires use_const_eff=true)" annotation(
        Dialog(enable = use_const_eff, group = "Design", tab = "Optimization"));
      parameter Boolean use_P_in = true "true of power setpoint is an input";
      parameter Modelica.Units.SI.Power P_rat = 200*1000 "Generator capacity";
      parameter Boolean use_external_co2_sink = false "True if CO2 connector is enabled" annotation(
        Dialog(tab = "Interfaces"));
      parameter Boolean use_external_fuel_source = false "True if CO2 connector is enabled" annotation(
        Dialog(tab = "Interfaces"));
      parameter Boolean disable = false "Disable component";
      final parameter Real availability = if disable then 0 else 1;
      replaceable package Fuel = MasterModel_SA5_ParameterExp.Fuel.Diesel constrainedby MasterModel_SA5_ParameterExp.Fuel.SimpleFuel "Fuel type" annotation(
         choicesAllMatching,
         Placement(transformation(extent = {{-82.0, 58.0}, {-62.0, 78.0}}, rotation = 0.0, origin = {0.0, 0.0})),
         Dialog(tab = "Fuel Consumption"));
      Modelica.Blocks.Tables.CombiTable1Dv power_to_fuelconsump(table = power_vs_fuelconsum, tableOnFile = false) if use_fuel_eff_table "kW vs l/h" annotation(
        Placement(transformation(extent = {{-10.0, -10.0}, {10.0, 10.0}}, rotation = -90.0, origin = {-16.0, -16.0})));
      parameter Boolean use_const_eff = false "if true then using constant efficiency" annotation(
        Dialog(enable = not use_fuel_eff_table, tab = "Fuel Consumption"));
      parameter Real eta_el_const(min = 0, max = 1) = 0.33 "Constant electric efficiency" annotation(
        Dialog(enable = use_const_eff, tab = "Fuel Consumption"));
      parameter Boolean use_fuel_eff_table = false "if true, fuel efficiency as a table, defined with F1 otherwise" annotation(
        Dialog(tab = "Fuel Consumption", enable = not use_const_eff));
      parameter Boolean fuelConsumptionIsVolumetric = true "Fuel amount for fuel consumption in liter, otherwise kg" annotation(
        Evaluate = true,
        Dialog(enable = not use_const_eff, tab = "Fuel Consumption"));
      parameter Modelica.Units.SI.VolumeFlowRate V_flow_fidle(displayUnit = "l/h") = from_lperh(0.08451/1000*P_rat) "Fuel consumption at idle operation" annotation(
        Dialog(enable = fuelConsumptionIsVolumetric and ((not use_fuel_eff_table) and not use_const_eff), tab = "Fuel Consumption"));
      parameter Modelica.Units.SI.VolumeFlowRate V_flow_frat(displayUnit = "l/h") = from_lperh((0.08451 + 0.246)/1000*P_rat) "Fuel consumption at peak operation" annotation(
        Dialog(enable = fuelConsumptionIsVolumetric and (not use_fuel_eff_table) and not use_const_eff, tab = "Fuel Consumption"));
      parameter Modelica.Units.SI.MassFlowRate m_flow_fidle(displayUnit = "kg/h") = from_kgperh(0.08451/1000*P_rat) "Fuel consumption at idle operation" annotation(
        Dialog(enable = not fuelConsumptionIsVolumetric and (not use_fuel_eff_table) and not use_const_eff, tab = "Fuel Consumption"));
      parameter Modelica.Units.SI.MassFlowRate m_flow_frat(displayUnit = "kg/h") = from_kgperh((0.08451 + 0.246)/1000*P_rat) "Fuel consumption at peak operation" annotation(
        Dialog(enable = not fuelConsumptionIsVolumetric and (not use_fuel_eff_table) and not use_const_eff, tab = "Fuel Consumption"));
      parameter Real power_vs_fuelconsum[:, :] = [0, 0; 25, 25; 50, 50; 75, 75; 100, 100] "Percentage of nominal power vs fuel consumption table [l/h] or [kg/h]" annotation(
        Dialog(enable = use_fuel_eff_table and not use_const_eff, tab = "Fuel Consumption"));
      // Economy Related Parameters
      parameter Time_yr lifetime = 16 "Expected lifetime [yr]" annotation(
        Dialog(tab = "Economy"));
      parameter PerPower_PerkW capex_p = 0 "CAPEX per rated power [1/kW]" annotation(
        Dialog(tab = "Economy"));
      parameter PerPowerTime_PerkWyr fixed_opex_p = 0 "OPEX per kW per year [1/(kWyr)]" annotation(
        Dialog(tab = "Economy"));
      parameter PerVolume_l fuel_cost = 0 "Cost per liter of fuel [1/l]" annotation(
        Dialog(tab = "Economy", enable = not use_external_fuel_source));
      parameter Real co2_emission_cost = 0 "Cost per ton of carbondioxide [1/t]" annotation(
        Dialog(tab = "Economy", enable = not use_external_co2_sink));
      parameter Boolean use_CO2_constraint = false "If true, CO2 emission constrained in the optimization" annotation(
        Dialog(group = "Emission limits", tab = "Optimization"));
      parameter Modelica.Units.SI.Mass CO2_max = Modelica.Constants.inf "Maximum CO2 emission, in kg" annotation(
        Dialog(enable = use_CO2_constraint, group = "Emission limits", tab = "Optimization"));
      parameter Boolean limit_operation_time = false "If true, running hours constrained in the optimization" annotation(
        Dialog(group = "Other limits", tab = "Optimization"));
      parameter Modelica.Units.SI.Time max_operation_hours(displayUnit = "h") = Modelica.Constants.inf "Maximum hours to run during optimization" annotation(
        Dialog(enable = limit_operation_time, group = "Other limits", tab = "Optimization"));
      Conversion conversion_from_kgph(redeclare replaceable function conversion = from_kgperh) if use_fuel_eff_table and not fuelConsumptionIsVolumetric annotation(
        Placement(transformation(extent = {{8.661555581893829, -37.33844441810617}, {19.33844441810617, -26.66155558189383}}, origin = {0.0, 0.0}, rotation = 0.0)));
      Conversion conversion_from_lph(redeclare replaceable function conversion = from_lperh) if use_fuel_eff_table and not fuelConsumptionIsVolumetric annotation(
        Placement(transformation(extent = {{8.661555581893829, -21.33844441810617}, {19.33844441810617, -10.661555581893829}}, origin = {0.0, 0.0}, rotation = 0.0)));
      parameter Boolean use_combined_heat_and_power = false "Add heatport" annotation(
        Dialog(tab = "Interfaces"));
      parameter Real eta_tot(min = eta_el_const, max = 1) = 1 "Total System Efficiency" annotation(
        Dialog(tab = "Combined Heat and Power"));
      FluidPort fluidPort(redeclare package Medium = Fuel, m_flow = m_flow_fuel) if use_external_fuel_source "FluidPort for fuel" annotation(
        Placement(transformation(extent = {{90, -10}, {110, 10}}, origin = {0, 0}, rotation = 0)));
      //Modelica.Units.SI.TimeAging variable_opex = fuel_cost*Modelica.Units.Conversions.to_litre(V_flow_fuel) + m_flow_CO2/1000*co2_emission_cost "Cost of fuel consumption and CO2 emmisions per second" annotation(Dialog(tab = "Economy"));
      Real P_gen(unit = "1", min = 0, max = 1) "Normalized power output";
      Modelica.Units.SI.Power P_out "Electrical power output";
      Modelica.Units.SI.Power Q_flow "Thermal power output";
      Modelica.Units.SI.Power P_loss "Power loss";
      Modelica.Units.SI.MassFlowRate m_flow_fuel(min = 0) "Fuel mass flow";
      Modelica.Units.SI.VolumeFlowRate V_flow_fuel(min = 0) "Fuel volume flow";
      Modelica.Units.SI.MassFlowRate m_flow_CO2(min = 0) "CO2 emission";
      Modelica.Units.SI.Time operation_time(displayUnit = "h") "Operation time";
      Modelica.Units.SI.Mass mass_CO2(min = 0) "Accumulated CO2 emissions";
      Modelica.Blocks.Interfaces.RealInput P_sp(min = 0, nominal = 1) if use_P_in "Power setpoint in p.u." annotation(
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 100})));
      Pin_AC pin_AC annotation(
        Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
      Modelica.Blocks.Math.Gain PercentNominalP(k = 100) if use_fuel_eff_table annotation(
        Placement(transformation(extent = {{-6.0, -6.0}, {6.0, 6.0}}, rotation = -90.0, origin = {-16.0, 12.0})));
      FluidPort co2_outlet(redeclare package Medium = MasterModel_SA5_ParameterExp.Fuel.CarbonDioxide, m_flow = -m_flow_CO2) if use_external_co2_sink annotation(
        Placement(transformation(extent = {{-10.0, -110.0}, {10.0, -90.0}}, rotation = 0.0, origin = {0.0, 0.0})));
    protected
      constant Modelica.Units.SI.MolarMass MM_C = Modelica.Media.IdealGases.Common.SingleGasesData.C.MM "Cabon Molar Mass";
      constant Modelica.Units.SI.MolarMass MM_O2 = Modelica.Media.IdealGases.Common.SingleGasesData.O2.MM "Cabon Molar Mass";
      constant Modelica.Units.SI.MolarMass MM_CO2 = Modelica.Media.IdealGases.Common.SingleGasesData.CO2.MM "Cabon Molar Mass";
    protected
      Modelica.Blocks.Interfaces.RealOutput flow_fnode annotation(
        Placement(transformation(extent = {{46.0, -42.0}, {66.0, -22.0}}, rotation = 0.0, origin = {0.0, 0.0})));
      Modelica.Blocks.Sources.RealExpression Vfuel_parameter(y = V_flow_frat) if not use_fuel_eff_table and fuelConsumptionIsVolumetric and not use_const_eff annotation(
        Placement(transformation(extent = {{-72, -54}, {-40, -26}})));
      Modelica.Blocks.Sources.RealExpression mfuel_parameter1(y = m_flow_frat) if not use_const_eff and not use_fuel_eff_table and not fuelConsumptionIsVolumetric annotation(
        Placement(transformation(extent = {{-72, -78}, {-40, -50}})));
      Modelica.Blocks.Interfaces.RealOutput P_node annotation(
        Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {16, 2})));
    equation
      if use_combined_heat_and_power then
        Q_flow = (m_flow_fuel*Fuel.LHV*eta_tot - P_out);
        P_loss = (m_flow_fuel*Fuel.LHV - P_out - Q_flow);
      else
        Q_flow = (m_flow_fuel*Fuel.LHV - P_out);
        P_loss = Q_flow;
      end if;
      if limit_operation_time then
        der(operation_time) = cubicStep(P_gen);
      else
        operation_time = 0;
      end if;
      P_gen = P_node*availability;
      P_out = P_gen*P_rat;
      m_flow_fuel = V_flow_fuel*Fuel.rho;
//efficiency=P_out/m_flow_fuel/fuel.LHV;
      if use_const_eff then
        eta_el_const*m_flow_fuel*Fuel.LHV = P_out;
        flow_fnode = 0;
// for mathematical stability , if constant efficiency is used this variable is not used in computation but it should be assigned with something for numerical balance
      else
        if fuelConsumptionIsVolumetric then
          V_flow_fuel = (V_flow_fidle + P_node*((flow_fnode) - V_flow_fidle))*sign_approx(P_node, 0.05)*availability;
        else
          m_flow_fuel = m_flow_fidle + P_node*((flow_fnode) - m_flow_fidle)*sign_approx(P_node, 0.05)*availability;
        end if;
      end if;
      m_flow_CO2 = Fuel.carbonContent*m_flow_fuel*(1 + MM_O2/MM_C);
      if use_CO2_constraint then
        der(mass_CO2) = m_flow_CO2;
      else
        mass_CO2 = 0;
      end if;
      -pin_AC.i*pin_AC.v = P_out;
      connect(PercentNominalP.y, power_to_fuelconsump.u[1]) annotation(
        Line(points = {{-16, 5.4}, {-16, -4}, {-15.999999999999996, -4}}, color = {0, 0, 127}));
      connect(Vfuel_parameter.y, flow_fnode) annotation(
        Line(points = {{-38.4, -40}, {-38.4, -46}, {26, -46}, {26, -32}, {56, -32}}, color = {0, 0, 127}));
      connect(PercentNominalP.u, P_sp) annotation(
        Line(points = {{-15.999999999999998, 19.2}, {-15.999999999999998, 74}, {0, 74}, {0, 100}}, color = {0, 0, 127}));
      connect(mfuel_parameter1.y, flow_fnode) annotation(
        Line(points = {{-38.4, -64}, {26, -64}, {26, -32}, {56, -32}}, color = {0, 0, 127}));
      connect(P_sp, P_node) annotation(
        Line(points = {{0, 100}, {0, 51}, {16, 51}, {16, 2}}, color = {0, 0, 127}));
      connect(power_to_fuelconsump.y[1], conversion_from_kgph.u) annotation(
        Line(points = {{-16.000000000000004, -27}, {-16.000000000000004, -32}, {7.593866698272595, -32}}, color = {0, 0, 127}));
      connect(conversion_from_kgph.y, flow_fnode) annotation(
        Line(points = {{19.872288859916786, -32}, {56, -32}}, color = {0, 0, 127}));
      connect(conversion_from_lph.y, flow_fnode) annotation(
        Line(points = {{19.872288859916786, -16}, {26, -16}, {26, -32}, {56, -32}}, color = {0, 0, 127}));
      connect(conversion_from_lph.u, power_to_fuelconsump.y[1]) annotation(
        Line(points = {{7.593866698272595, -16}, {1.5938666982725946, -16}, {1.5938666982725946, -32}, {-15.999999999999998, -32}, {-15.999999999999998, -27}}, color = {0, 0, 127}));
      annotation(
        Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, radius = 20), Rectangle(extent = {{-78, 40}, {90, -40}}, lineColor = {51, 51, 51}, fillColor = {51, 51, 51}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-6, 78}, {82, 8}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{0, 70}, {76, 12}}, lineColor = {51, 51, 51}, fillColor = {51, 51, 51}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-92, 20}, {-84, -20}}, lineColor = {51, 51, 51}, fillColor = {51, 51, 51}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-76, -46}, {-48, -64}}, lineColor = {51, 51, 51}, fillColor = {51, 51, 51}, fillPattern = FillPattern.Solid), Rectangle(extent = {{60, -44}, {88, -62}}, lineColor = {51, 51, 51}, fillColor = {51, 51, 51}, fillPattern = FillPattern.Solid), Polygon(points = {{38, 60}, {30, 40}, {40, 44}, {36, 30}, {34, 34}, {36, 24}, {42, 30}, {38, 30}, {44, 48}, {34, 44}, {42, 60}, {38, 60}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-72, 32}, {-34, 28}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-72, 22}, {-34, 18}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-72, 12}, {-34, 8}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-72, -30}, {-34, -34}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-72, -20}, {-34, -24}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{-72, -10}, {-34, -14}}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-300, -100}, {300, -130}}, lineColor = {0, 0, 0}, fillColor = {0, 115, 200}, fillPattern = FillPattern.Solid, textString = "%name")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)),
        __Dymola_experimentSetupOutput,
        __Dymola_experimentFlags(Advanced(GenerateVariableDependencies = false, OutputModelicaCode = false), Evaluate = false, OutputCPUtime = false, OutputFlatModelica = false));
    end Generator_Base;

    extends Generator_Base(final use_P_in = true, P_rat(min = P_rat_min, max = P_rat_max), redeclare replaceable package Fuel = MasterModel_SA5_ParameterExp.Fuel.Diesel, use_external_co2_sink = false, use_const_eff = true, disable = false);
    parameter Boolean P_rat_free_ = false "If true rated power P_rat is free" annotation(
      Dialog(group = "Design", tab = "Optimization"));
    parameter Modelica.Units.SI.Power P_rat_min = 0 "Minimal rated power" annotation(
      Dialog(enable = P_rat_free_, group = "Design", tab = "Optimization"));
    parameter Modelica.Units.SI.Power P_rat_max = .Modelica.Constants.inf "Maximal rated power" annotation(
      Dialog(enable = P_rat_free_, group = "Design", tab = "Optimization"));
    FluidPort outlet_fuel(redeclare package Medium = Fuel, m_flow = m_flow_fuel) annotation(
      Placement(transformation(extent = {{-54.0, -110.0}, {-34.0, -90.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
  equation

  end Generator;

  /*IdealTankMultiPort*/

  model IdealTankMultiPort
    //External Models repository for Local Use

    model TriplePortTank
      //External Models Respoitory for Local TriplePortTank use
      /*FluidPort */

      connector FluidPort "Fluid port for low fidelity models in microgrid components"
        replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.Hydrogen constrainedby MasterModel_SA5_ParameterExp.Fuel.SimpleFuel "Transported medium";
        Modelica.Units.SI.Pressure p "Pressure";
        flow Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate";
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end FluidPort;

      /*Fuel*/
      //Fuel model will be referenced From MasterModel_SA5_ParameterExp
      replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.Hydrogen constrainedby MasterModel_SA5_ParameterExp.Fuel.Templates.SimpleFuel "Transported medium" annotation(
         choicesAllMatching);
      parameter Boolean use_p_in = true "User input connector" annotation(
        choices(checkBox = true));
      input Modelica.Units.SI.Pressure p = 101325 "Boundry Pressure" annotation(
        Dialog(enable = not use_p_in));
      FluidPort fluidPort(redeclare package Medium = Medium) annotation(
        Placement(transformation(extent = {{-110, -10}, {-90, 10}})));
      Modelica.Blocks.Interfaces.RealInput p_in if use_p_in annotation(
        Placement(transformation(extent = {{140, -20}, {100, 20}})));
      FluidPort fluidPort2(redeclare package Medium = Medium) annotation(
        Placement(transformation(extent = {{-110.0, 20.0}, {-90.0, 40.0}}, rotation = 0.0, origin = {0.0, 0.0})));
      FluidPort fluidPort3(redeclare package Medium = Medium) annotation(
        Placement(transformation(origin = {2, 0}, extent = {{-112, -36}, {-92, -16}}), iconTransformation(extent = {{-112, -36}, {-92, -16}})));
    protected
      Modelica.Blocks.Interfaces.RealInput p_internal;
    equation
      fluidPort.p = p_internal;
      fluidPort2.p = p_internal;
      fluidPort3.p = p_internal;
      if not use_p_in then
        p_internal = p;
      end if;
      connect(p_in, p_internal);
      annotation(
        Icon(graphics = {Ellipse(extent = {{-100, 100}, {100, -100}}, fillPattern = FillPattern.Solid, fillColor = {127, 202, 238}, lineColor = {51, 127, 216}), Text(textString = "p", origin = {0, 0}, extent = {{-80, 80}, {80, -80}}, lineColor = {74, 84, 226})}));
    end TriplePortTank;

    //Repository End
    extends TriplePortTank(use_p_in = false);
    parameter Modelica.Units.SI.Mass m_content_max(min = 0) = 100 "'Tank' content at the beginning of simulation" annotation(
      Dialog(group = "Dimension"));
    parameter Modelica.Units.SI.Mass m_content_start(min = 0, max = m_content_max) = 100 "'Tank' content at the beginning of simulation" annotation(
      Dialog(group = "Initialization"));
    Modelica.Units.SI.Mass m_content(start = m_content_start);
    Real SOC = m_content/m_content_max;
  equation
    der(m_content) = fluidPort.m_flow + fluidPort2.m_flow + fluidPort3.m_flow;
    annotation(
      Icon(graphics = {Ellipse(origin = {2, -78}, extent = {{-101, 24}, {101, -24}}, fillPattern = FillPattern.Solid, fillColor = {74, 144, 226}), Rectangle(origin = {2, 5}, extent = {{-100, 81}, {100, -81}}, fillPattern = FillPattern.Solid, fillColor = {74, 144, 226}, lineColor = {74, 144, 226}), Ellipse(origin = {2, 84}, extent = {{-101, 24}, {101, -24}}, fillPattern = FillPattern.Solid, fillColor = {74, 144, 226})}),
      uses(Modelica(version = "4.0.0"), ThermalPower(version = "1.25")));
  end IdealTankMultiPort;

  model HardCodeDutyCycle "Hard code the duty cycle into the componenet, so that no external csv references are nedded"
    import Modelica.Blocks.Tables.CombiTable1Ds;
    //Define the duty cycle
    parameter Real dutyCycleRaw[449, 2] = [0, 0.411519447; 60, 0.411519447; 120, 0.476772092; 180, 0.466705548; 240, 0.370768416; 300, 0.556563893; 360, 250; 420, 250; 480, 250; 540, 250; 600, 250; 660, 250; 720, 250; 780, 250; 840, 148.5612282; 900, 206.1434123; 960, 179.7993104; 1020, 88.34563361; 1080, 95.3150035; 1140, 92.43223317; 1200, 100.6309441; 1260, 99.87128108; 1320, 104.4690219; 1380, 103.3732366; 1440, 102.8199147; 1500, 105.6392742; 1560, 110.672483; 1620, 115.5967626; 1680, 111.4797109; 1740, 110.2378546; 1800, 107.0979566; 1860, 109.0807124; 1920, 108.1114858; 1980, 117.1553802; 2040, 117.2917675; 2100, 123.45711; 2160, 118.1825761; 2220, 119.7365337; 2280, 115.9099912; 2340, 120.6732228; 2400, 125.4892383; 2460, 133.5747478; 2520, 107.7509764; 2580, 105.3048575; 2640, 100.8707356; 2700, 100.590498; 2760, 91.09763288; 2820, 92.69413079; 2880, 94.87010193; 2940, 91.29699915; 3000, 58.91577323; 3060, 53.00210275; 3120, 62.75000479; 3180, 61.41852665; 3240, 59.20024957; 3300, 53.34480967; 3360, 57.48728932; 3420, 53.96534777; 3480, 54.48112934; 3540, 120.8924548; 3600, 125.2345059; 3660, 124.089546; 3720, 124.81336; 3780, 109.4194533; 3840, 114.2713998; 3900, 153.9831802; 3960, 161.6440358; 4020, 160.796975; 4080, 160.7150358; 4140, 155.1546241; 4200, 142.1135409; 4260, 152.7808232; 4320, 147.2894811; 4380, 150.5837555; 4440, 148.864816; 4500, 70.51595328; 4560, 72.51932993; 4620, 198.6493448; 4680, 190.1518318; 4740, 177.6865573; 4800, 250; 4860, 250; 4920, 250; 4980, 250; 5040, 115.3930135; 5100, 2.055400004; 5160, 1.716188916; 5220, 1.539200011; 5280, 1.633361096; 5340, 1.792577765; 5400, 1.689922222; 5460, 1.662908321; 5520, 1.581744449; 5580, 2.02564167; 5640, 2.141226295; 5700, 1.779597206; 5760, 1.924175017; 5820, 213.8644555; 5880, 250; 5940, 250; 6000, 250; 6060, 250; 6120, 250; 6180, 250; 6240, 250; 6300, 250; 6360, 250; 6420, 153.5361451; 6480, 108.0423872; 6540, 136.6084548; 6600, 142.7625915; 6660, 145.7976034; 6720, 143.7254677; 6780, 144.2172233; 6840, 147.7498071; 6900, 145.785734; 6960, 187.1252242; 7020, 250; 7080, 63.88758681; 7140, 123.8334418; 7200, 2.334194997; 7260, 2.562905557; 7320, 2.299205234; 7380, 3.326341675; 7440, 1.943579493; 7500, 2.15430443; 7560, 2.338188887; 7620, 2.20579447; 7680, 106.4368131; 7740, 44.61900873; 7800, 233.4351637; 7860, 235.1672732; 7920, 232.8986655; 7980, 231.6611891; 8040, 234.1281644; 8100, 232.3446125; 8160, 236.6685516; 8220, 237.4567937; 8280, 234.820983; 8340, 235.6139064; 8400, 239.2765668; 8460, 236.1924311; 8520, 250; 8580, 57.33389321; 8640, 28.81232558; 8700, 2.282713887; 8760, 2.32144168; 8820, 2.460522714; 8880, 2.539933357; 8940, 2.28273052; 9000, 57.03157239; 9060, 250; 9120, 250; 9180, 250; 9240, 250; 9300, 250; 9360, 250; 9420, 250; 9480, 250; 9540, 250; 9600, 250; 9660, 250; 9720, 250; 9780, 250; 9840, 250; 9900, 250; 9960, 109.4097501; 10020, 248.4788742; 10080, 210.441491; 10140, 210.9393742; 10200, 225.4252519; 10260, 250; 10320, 250; 10380, 250; 10440, 144.0721629; 10500, 200.7428232; 10560, 2.400652789; 10620, 2.638216688; 10680, 2.628697217; 10740, 2.345541653; 10800, 2.504402327; 10860, 2.777388891; 10920, 245.6594403; 10980, 187.6340752; 11040, 216.5618146; 11100, 219.7992925; 11160, 222.9196068; 11220, 220.8786926; 11280, 223.2635227; 11340, 218.9323149; 11400, 224.6313777; 11460, 222.8613887; 11520, 223.0134044; 11580, 224.8510806; 11640, 228.139392; 11700, 223.5070714; 11760, 250; 11820, 250; 11880, 154.2116173; 11940, 2.916613883; 12000, 2.725408893; 12060, 2.647148743; 12120, 2.863334198; 12180, 2.679691686; 12240, 3.398661163; 12300, 2.46172501; 12360, 2.669802344; 12420, 3.02649998; 12480, 2.653038899; 12540, 2.553224968; 12600, 2.68128058; 12660, 235.4504395; 12720, 250; 12780, 250; 12840, 250; 12900, 250; 12960, 250; 13020, 250; 13080, 250; 13140, 250; 13200, 250; 13260, 250; 13320, 250; 13380, 250; 13440, 250; 13500, 250; 13560, 250; 13620, 250; 13680, 199.8640008; 13740, 250; 13800, 250; 13860, 250; 13920, 250; 13980, 250; 14040, 250; 14100, 250; 14160, 250; 14220, 250; 14280, 250; 14340, 250; 14400, 250; 14460, 250; 14520, 250; 14580, 250; 14640, 250; 14700, 250; 14760, 250; 14820, 250; 14880, 250; 14940, 250; 15000, 250; 15060, 250; 15120, 250; 15180, 250; 15240, 231.522011; 15300, 2.801255577; 15360, 2.747000008; 15420, 2.948071775; 15480, 2.993452794; 15540, 2.816613926; 15600, 2.793358319; 15660, 3.067605542; 15720, 250; 15780, 250; 15840, 250; 15900, 250; 15960, 250; 16020, 250; 16080, 25.83916217; 16140, 250; 16200, 250; 16260, 250; 16320, 250; 16380, 250; 16440, 250; 16500, 250; 16560, 250; 16620, 250; 16680, 250; 16740, 250; 16800, 14.54737525; 16860, 45.02893678; 16920, 13.32913042; 16980, 11.24577223; 17040, 13.05656242; 17100, 11.75769465; 17160, 10.81227226; 17220, 10.40906101; 17280, 14.54645551; 17340, 13.37256393; 17400, 250; 17460, 250; 17520, 250; 17580, 230.7019195; 17640, 136.4175905; 17700, 250; 17760, 2.805159251; 17820, 177.8759952; 17880, 150.7971543; 17940, 138.6760955; 18000, 137.267785; 18060, 129.9033294; 18120, 128.1740054; 18180, 127.3520836; 18240, 121.2342731; 18300, 124.3122864; 18360, 114.8764408; 18420, 115.4593428; 18480, 118.4396102; 18540, 118.2521047; 18600, 250; 18660, 10.26434453; 18720, 230.4512146; 18780, 233.8279991; 18840, 250; 18900, 250; 18960, 250; 19020, 250; 19080, 250; 19140, 250; 19200, 250; 19260, 250; 19320, 250; 19380, 250; 19440, 250; 19500, 250; 19560, 250; 19620, 250; 19680, 250; 19740, 250; 19800, 250; 19860, 250; 19920, 250; 19980, 250; 20040, 250; 20100, 250; 20160, 250; 20220, 181.1442156; 20280, 116.3925181; 20340, 67.01614519; 20400, 146.1969401; 20460, 138.4525869; 20520, 138.8228298; 20580, 135.2087918; 20640, 141.2348919; 20700, 250; 20760, 250; 20820, 250; 20880, 250; 20940, 250; 21000, 53.09762343; 21060, 154.5833531; 21120, 96.96797551; 21180, 104.1210155; 21240, 206.9129024; 21300, 197.9193398; 21360, 192.9400849; 21420, 199.7791693; 21480, 200.1267376; 21540, 203.5746053; 21600, 200.726315; 21660, 204.8693191; 21720, 173.9018351; 21780, 178.540496; 21840, 196.0317612; 21900, 187.4426171; 21960, 180.0321415; 22020, 181.3408394; 22080, 189.7380091; 22140, 187.6296628; 22200, 177.5623758; 22260, 184.4655344; 22320, 185.7722012; 22380, 189.7481598; 22440, 190.2705137; 22500, 190.1372254; 22560, 188.1918814; 22620, 194.1985851; 22680, 190.2719888; 22740, 195.6748072; 22800, 195.661382; 22860, 196.0450257; 22920, 200.4427787; 22980, 195.5350338; 23040, 199.9211549; 23100, 205.0897111; 23160, 197.5451546; 23220, 194.6551484; 23280, 200.6799202; 23340, 202.3410561; 23400, 197.4569821; 23460, 193.3476044; 23520, 205.4653019; 23580, 212.7246628; 23640, 208.5308228; 23700, 205.5865309; 23760, 204.1463119; 23820, 207.0856607; 23880, 207.5338673; 23940, 202.3711145; 24000, 197.0176849; 24060, 205.7948938; 24120, 205.8928596; 24180, 210.0234752; 24240, 207.8325573; 24300, 134.8424546; 24360, 13.54121105; 24420, 18.40187488; 24480, 29.31576928; 24540, 31.6580003; 24600, 31.08371661; 24660, 38.16272238; 24720, 43.99765507; 24780, 40.66147285; 24840, 39.89059973; 24900, 41.60480833; 24960, 46.15445545; 25020, 241.6540642; 25080, 250; 25140, 250; 25200, 250; 25260, 250; 25320, 250; 25380, 250; 25440, 250; 25500, 250; 25560, 250; 25620, 250; 25680, 250; 25740, 250; 25800, 250; 25860, 250; 25920, 250; 25980, 250; 26040, 250; 26100, 250; 26160, 250; 26220, 250; 26280, 250; 26340, 250; 26400, 250; 26460, 250; 26520, 250; 26580, 250; 26640, 250; 26700, 250; 26760, 250; 26820, 250; 26880, 99.62749646];
    Modelica.Blocks.Tables.CombiTable1Ds dutyCycleTable(table = dutyCycleRaw, smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments, extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints) annotation(
      Placement(transformation(origin = {-2, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Real y;
    Modelica.Blocks.Interfaces.RealOutput out annotation(
      Placement(transformation(origin = {-110, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 180), iconTransformation(origin = {-110, 0}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
  equation
    y = dutyCycleTable.y[1];
    dutyCycleTable.u = time;
    connect(dutyCycleTable.y[1], out) annotation(
      Line(points = {{-13, 0}, {-110, 0}}, color = {0, 0, 127}));
    annotation(
      uses(Modelica(version = "4.0.0")),
      Icon(graphics = {Bitmap(origin = {-1, -3}, extent = {{-95, 121}, {95, -121}}, imageSource = "")}));
  end HardCodeDutyCycle;

  /*HydrogenTank*/

  model Tank "Tank model for gas storage"
    // External Models repository fir Local Tank use
    /*Tank Templates*/

    partial model Tank_base
      //External Function Repository for Local Tank_base use;

      connector FluidPort "Fluid port for low fidelity models in microgrid components"
        replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.Hydrogen constrainedby MasterModel_SA5_ParameterExpFuel.Templates.SimpleFuel "Transported medium";
        Modelica.Units.SI.Pressure p "Pressure";
        flow Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate";
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end FluidPort;

      replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.compressedhydrogen "Transported Medium" annotation(
        choicesAllMatching);
      parameter Real SOC_start = 0.5;
      parameter Modelica.Units.SI.Volume V(min = V_min, max = V_max) = 1 "Tank volumn" annotation(
        Dialog(group = "Parameters"));
      parameter Boolean set_SOC_final_start_ = false "If true, SOC at final time equals start value" annotation(
        Dialog(group = "Constraints", tab = "Optimization"));
      Real SOC(start = SOC_start, fixed = true, min = 0, max = 1) "Tank SOC p_min->0, p_max->1";
      Modelica.Units.SI.AmountOfSubstance n "Amount of substance in tank";
      Modelica.Units.SI.Power P_loss "Power loss from leakage, based on H2 LHV";
      Modelica.Units.SI.Power P_in = m_flow_in*Medium.LHV "Energyflow into tank based on LHV";
      Modelica.Units.SI.Power P_out = m_flow_out*Medium.LHV "Energyflow from tank based on LHV";
      parameter Boolean V_free_ = false "If true, then volume is free in optimization" annotation(
        Dialog(group = "Design", tab = "Optimization"));
      parameter Modelica.Units.SI.Volume V_min = 1e-3 "Minimum volume in the optimization" annotation(
        Dialog(enable = V_free_, group = "Design", tab = "Optimization"));
      parameter Modelica.Units.SI.Volume V_max = 1e5 "Maximum volumein the optimization" annotation(
        Dialog(enable = V_free_, group = "Design", tab = "Optimization"));
      Modelica.Units.SI.Mass mass = n*Medium.MolarMass "Mass in tank";
      Modelica.Units.SI.MassFlowRate m_flow_in = inlet.m_flow "Mass flow in";
      Modelica.Units.SI.MassFlowRate m_flow_out = outlet.m_flow "Mass flow out";
      Modelica.Units.SI.MassFlowRate m_flow_loss "Mass flow lost to environment";
      Modelica.Units.SI.MolarFlowRate n_flow_in = m_flow_in/Medium.MolarMass "Molar flow in";
      Modelica.Units.SI.MolarFlowRate n_flow_out = m_flow_out/Medium.MolarMass "Molar flow out";
      parameter Modelica.Units.SI.Energy E_store "Energy storagy capacity";
      FluidPort inlet(redeclare package Medium = Medium) annotation(
        Placement(transformation(extent = {{-70, -10}, {-50, 10}}), iconTransformation(extent = {{-70, -10}, {-50, 10}})));
      FluidPort outlet(redeclare package Medium = Medium) annotation(
        Placement(transformation(extent = {{50, -10}, {70, 10}}), iconTransformation(extent = {{50, -10}, {70, 10}})));
      annotation(
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-60, -100}, {60, 100}}), graphics = {Rectangle(extent = {{-24, 66}, {24, 56}}, lineColor = {0, 0, 0}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, radius = 30), Text(lineColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name"), Rectangle(extent = {{-60, 60}, {60, -80}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, radius = 40), Rectangle(extent = {{-24, 90}, {24, 80}}, lineColor = {0, 0, 0}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, radius = 30), Rectangle(extent = {{-14, 80}, {14, 66}}, lineColor = {0, 0, 0}, fillColor = {175, 175, 175}, fillPattern = FillPattern.Solid), Text(extent = {{-60, 34}, {60, -46}}, lineColor = {0, 128, 255}, fillColor = {170, 213, 255}, fillPattern = FillPattern.Solid, textString = "H2")}));
    end Tank_base;

    /*Constraint*/

    model Constraint "Block for time-invariant inequality constraints in the optimization"
      parameter Boolean exp_constraint_active = false "Use this parameter to turn on and off the constraint";
      parameter Real min_val = -Modelica.Constants.inf "Minimum value of exp" annotation(
        Dialog(group = "Constraining values"));
      parameter Real max_val = Modelica.Constants.inf "Maximum value of exp" annotation(
        Dialog(group = "Constraining values"));
      input Real exp(min = if exp_constraint_active then min_val else -Modelica.Constants.inf, max = if exp_constraint_active then max_val else Modelica.Constants.inf) "Expression to be constrained" annotation(
        Dialog(group = "Expression", enable = exp_constraint_active));
    equation
      if exp_constraint_active then
        assert(exp >= min_val, "Minimum constraint violated in " + getInstanceName() + " at t=" + String(time) + ": Adjust the constraint or control strategy to ensure the problem is feasible", level = AssertionLevel.warning);
        assert(exp <= max_val, "Maximum constraint violated in " + getInstanceName() + " at t=" + String(time) + ": Adjust the constraint or control strategy to ensure the problem is feasible", level = AssertionLevel.warning);
      end if;
      annotation(
        defaultComponentName = "constraint_",
        Icon(graphics = {Rectangle(extent = {{-100, 40}, {100, -40}}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid), Text(extent = {{-80, 40}, {80, -40}}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "Constraint"), Text(extent = {{-112, 32}, {112, -32}}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, textString = "%name", origin = {-2, 58})}));
    end Constraint;

    //EndRepositroy
    extends Tank_base(E_store = energyDensity_max*V, redeclare replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.compressedhydrogen constrainedby MasterModel_SA5_ParameterExp.Fuel.Templates.SimpleFuel);
    //Local Parameters
    parameter Modelica.Units.SI.Temperature T = 273.15 + 80 "Tank temperature" annotation(
      Dialog(group = "Parameters"));
    parameter Modelica.Units.SI.MolarFlowRate ndot_leak = 1e-4 "Molar leak flow" annotation(
      Dialog(group = "Parameters"));
    //Local Limits
    parameter Boolean use_pressure_constraint = true "If true, SOC is constrained in the optimization" annotation(
      Dialog(group = "Limits"));
    parameter Modelica.Units.SI.Pressure p_max = 750e5 "Max tank pressure" annotation(
      Dialog(group = "Limits"));
    parameter Modelica.Units.SI.Pressure p_min = 10e5 "Min tank pressure" annotation(
      Dialog(group = "Limits"));
    // Conversion
    //  final parameter Modelica.Units.SI.SpecificEnergy LHV(displayUnit="kWh/kg") = Medium.LHV "Lower heating value";
    final parameter Modelica.Units.SI.Density rho_max = Medium.MolarMass*p_max/T/Modelica.Constants.R "Tank kg per m3";
    final parameter Modelica.Units.SI.EnergyDensity energyDensity_max = Medium.LHV*rho_max "Max. energy density";
    //variables
    Modelica.Units.SI.Pressure p "Tank pressure";
    Constraint constraint_SOC(exp = SOC, min_val = 0, max_val = 1) if use_pressure_constraint annotation(
      Placement(transformation(extent = {{10.0, 30.0}, {30.0, 50.0}}, rotation = 0.0, origin = {0.0, 0.0})));
  equation
    der(SOC) = (.Modelica.Constants.R*T/(V*(p_max - p_min)))*(inlet.m_flow/Medium.MolarMass + outlet.m_flow/Medium.MolarMass - ndot_leak);
    p = SOC*(p_max - p_min) + p_min;
    n = p*V/(.Modelica.Constants.R*T);
    m_flow_loss = ndot_leak*Medium.MolarMass;
// Losses
    P_loss = m_flow_loss*Medium.LHV;
// Connectors
    inlet.p = p;
    outlet.p = p;
    annotation(
      Diagram(coordinateSystem(extent = {{-60, -100}, {60, 100}})));
  end Tank;

  /*TransCellSpliter*/

  block TransCellsplitter
    extends Modelica.Blocks.Icons.Block;
    Modelica.Blocks.Interfaces.RealInput u annotation(
      Placement(transformation(extent = {{-139.44179364012908, 38.55820635987092}, {-104.55820635987092, 73.44179364012908}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Interfaces.RealOutput y annotation(
      Placement(transformation(extent = {{151.87045005112003, 63.870450051120045}, {188.12954994887997, 100.12954994887995}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Interfaces.RealInput SOC1 annotation(
      Placement(transformation(extent = {{-17.441793640129077, -17.441793640129077}, {17.441793640129077, 17.441793640129077}}, origin = {-80.0, 140.0}, rotation = -90.0)));
    Modelica.Blocks.Interfaces.RealInput SOC2 annotation(
      Placement(transformation(extent = {{-17.441793640129077, -17.441793640129077}, {17.441793640129077, 17.441793640129077}}, origin = {-6.0, 140.0}, rotation = -90.0)));
    Modelica.Blocks.Logical.Switch switch3 annotation(
      Placement(transformation(extent = {{107.16666666666666, 85.83333333333334}, {127.16666666666666, 105.83333333333334}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression SOC_1(y = SOC1) annotation(
      Placement(transformation(extent = {{41.166666666666686, 53.83333333333333}, {61.166666666666686, 73.83333333333333}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.Greater greater3 annotation(
      Placement(transformation(extent = {{72.5, 54.5}, {92.5, 74.5}})));
    Modelica.Blocks.Sources.RealExpression Min_SOC_Allowed(y = 0.1) annotation(
      Placement(transformation(extent = {{30.4456, 10}, {49.5544, 30}}, origin = {-8, 2})));
    Modelica.Blocks.Sources.RealExpression zval3(y = 0) annotation(
      Placement(transformation(extent = {{63.612246157867986, 77.83333333333334}, {82.72108717546533, 97.83333333333334}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Math.Division division2 annotation(
      Placement(transformation(extent = {{4.0, 38.0}, {24.0, 58.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression FCnumbers(y = 2) annotation(
      Placement(transformation(extent = {{-22.0, 12.0}, {-2.0, 32.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression zval5(y = 0) annotation(
      Placement(transformation(extent = {{65.61224615786799, 5.833333333333343}, {84.72108717546533, 25.833333333333343}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression SOC_2(y = SOC2) annotation(
      Placement(transformation(extent = {{43.166666666666686, -18.16666666666667}, {63.166666666666686, 1.8333333333333286}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.Greater greater4 annotation(
      Placement(transformation(extent = {{74.5, -17.499999999999986}, {94.5, 2.500000000000014}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.Switch switch4 annotation(
      Placement(transformation(extent = {{109.16666666666666, 13.833333333333343}, {129.16666666666666, 33.83333333333334}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Interfaces.RealOutput y2 annotation(
      Placement(transformation(extent = {{151.87045005112003, 25.870450051120045}, {188.12954994887997, 62.129549948879955}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.Switch switch annotation(
      Placement(transformation(extent = {{-52.66666666666667, 23.666666666666657}, {-32.66666666666667, 43.66666666666666}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.Greater greater annotation(
      Placement(transformation(extent = {{-87.33333333333333, -7.666666666666664}, {-67.33333333333333, 12.333333333333336}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression zval2(y = 250000) annotation(
      Placement(transformation(extent = {{-117.55442050879867, -32.0}, {-98.44557949120133, -12.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression MaxRatedPower(y = 0) annotation(
      Placement(transformation(extent = {{-92, 32}, {-72, 52}}, origin = {6, 6})));
  equation
    connect(SOC_1.y, greater3.u1) annotation(
      Line(points = {{62.1667, 63.8333}, {62.1667, 64.5}, {70.5, 64.5}}, color = {0, 0, 127}));
    connect(Min_SOC_Allowed.y, greater3.u2) annotation(
      Line(points = {{43, 22}, {43, 56.5}, {70.5, 56.5}}, color = {0, 0, 127}));
    connect(greater3.y, switch3.u2) annotation(
      Line(points = {{93.5, 64.5}, {98.6667, 64.5}, {98.6667, 95.8333}, {105.167, 95.8333}}, color = {255, 0, 255}));
    connect(zval3.y, switch3.u3) annotation(
      Line(points = {{83.6765292263452, 87.83333333333333}, {105.16666666666666, 87.83333333333333}}, color = {0, 0, 127}));
    connect(FCnumbers.y, division2.u2) annotation(
      Line(points = {{-1, 22}, {-1, 42}, {2, 42}}, color = {0, 0, 127}));
    connect(division2.y, switch3.u1) annotation(
      Line(points = {{25, 48}, {25, 103.83333333333334}, {105.16666666666666, 103.83333333333334}}, color = {0, 0, 127}));
    connect(greater4.y, switch4.u2) annotation(
      Line(points = {{95.49999999999999, -7.5}, {100.66666666666666, -7.5}, {100.66666666666666, 23.83333333333333}, {107.16666666666666, 23.83333333333333}}, color = {255, 0, 255}));
    connect(zval5.y, switch4.u3) annotation(
      Line(points = {{85.6765292263452, 15.833333333333329}, {107.16666666666666, 15.833333333333329}}, color = {0, 0, 127}));
    connect(division2.y, switch4.u1) annotation(
      Line(points = {{25, 48}, {25, 31.833333333333343}, {107.16666666666666, 31.833333333333343}}, color = {0, 0, 127}));
    connect(switch3.y, y) annotation(
      Line(points = {{128.16666666666666, 95.83333333333334}, {136, 95.83333333333334}, {136, 82}, {170, 82}}, color = {0, 0, 127}));
    connect(switch4.y, y2) annotation(
      Line(points = {{130.16666666666666, 23.833333333333343}, {134, 23.833333333333343}, {134, 44}, {170, 44}}, color = {0, 0, 127}));
    connect(SOC_2.y, greater4.u1) annotation(
      Line(points = {{64.16666666666666, -8.166666666666671}, {64.16666666666666, -7.5}, {72.49999999999999, -7.5}}, color = {0, 0, 127}));
    connect(Min_SOC_Allowed.y, greater4.u2) annotation(
      Line(points = {{43, 22}, {58, 22}, {58, -15.5}, {72.5, -15.5}}, color = {0, 0, 127}));
    connect(greater.y, switch.u2) annotation(
      Line(points = {{-66.33333333333333, 2.3333333333333144}, {-61.16666666666666, 2.3333333333333144}, {-61.16666666666666, 33.66666666666664}, {-54.66666666666666, 33.66666666666664}}, color = {255, 0, 255}));
    connect(zval2.y, greater.u2) annotation(
      Line(points = {{-97.49013744032146, -22}, {-97.49013744032146, -5.666666666666664}, {-89.33333333333333, -5.666666666666664}}, color = {0, 0, 127}));
    connect(u, greater.u1) annotation(
      Line(points = {{-122, 56}, {-105.66666666666666, 56}, {-105.66666666666666, 2.3333333333333357}, {-89.33333333333333, 2.3333333333333357}}, color = {0, 0, 127}));
    connect(u, switch.u3) annotation(
      Line(points = {{-122, 56}, {-122, 19.666666666666657}, {-54.66666666666667, 19.666666666666657}, {-54.66666666666667, 25.666666666666657}}, color = {0, 0, 127}));
    connect(switch.y, division2.u1) annotation(
      Line(points = {{-31.66666666666667, 33.66666666666666}, {-14.833333333333336, 33.66666666666666}, {-14.833333333333336, 54}, {2, 54}}, color = {0, 0, 127}));
    connect(MaxRatedPower.y, switch.u1) annotation(
      Line(points = {{-65, 48}, {-65, 47.6667}, {-54.6667, 47.6667}, {-54.6667, 41.6667}}, color = {0, 0, 127}));
    annotation(
      Icon(graphics = {Rectangle(origin = {20, 12}, extent = {{-158, 140}, {158, -140}}), Text(textString = "Power Split", origin = {2, 24}, extent = {{-88, 27}, {88, -27}}), Ellipse(origin = {48, -50}, extent = {{-34.5663198187478, 37.20838371872752}, {34, -38}})}));
  end TransCellsplitter;

  /*FC250kcurrent*/

  block FC250kcurrent
    extends .Modelica.Blocks.Icons.Block;
    Modelica.Blocks.Logical.Switch switch annotation(
      Placement(transformation(extent = {{36.80555555555556, 94.19444444444446}, {56.80555555555556, 114.19444444444446}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Interfaces.RealInput u annotation(
      Placement(transformation(extent = {{-120.0, 32.0}, {-80.0, 72.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression zVal(y = 0) annotation(
      Placement(transformation(extent = {{-42.0, 86.0}, {-22.0, 106.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.Switch switch2 annotation(
      Placement(transformation(origin = {-4, 0}, extent = {{42, 24}, {62, 44}})));
    Modelica.Blocks.Sources.RealExpression realExpression3 annotation(
      Placement(transformation(extent = {{-22.0, 14.0}, {-2.0, 34.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.LessEqual lessEqual2 annotation(
      Placement(transformation(extent = {{-18.0, -20.0}, {2.0, 0.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression uinput(y = u) annotation(
      Placement(transformation(extent = {{-98.0, 19.165179581113506}, {-78.0, 36.834820418886494}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Interfaces.RealOutput y annotation(
      Placement(transformation(origin = {14, -4}, extent = {{162.475, 12.181}, {182.475, 32.181}}), iconTransformation(extent = {{162.475, 12.181}, {182.475, 32.181}})));
    Modelica.Blocks.Logical.Greater greater annotation(
      Placement(transformation(extent = {{-6.0, 62.0}, {14.0, 82.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.Greater greater2 annotation(
      Placement(transformation(extent = {{-18.0, -46.0}, {2.0, -26.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression zval2(y = 0) annotation(
      Placement(transformation(extent = {{-58.0, -56.0}, {-38.0, -36.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Logical.And and1 annotation(
      Placement(transformation(extent = {{12, -16}, {32, 4}}, origin = {6, -4})));
    Modelica.Blocks.Math.Add add2 annotation(
      Placement(transformation(extent = {{89.7374, 21.0905}, {109.737, 41.0905}})));
    Modelica.Blocks.Sources.RealExpression RequiredPOwer(y = FCPowerRequired) annotation(
      Placement(transformation(extent = {{-12.0, 102.0}, {8.0, 122.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression LowerValue(y = FCLowVal) annotation(
      Placement(transformation(extent = {{-14.111111111111093, 33.11111111111111}, {5.888888888888907, 53.11111111111111}}, origin = {0.0, 0.0}, rotation = 0.0)));
    Modelica.Blocks.Sources.RealExpression I_Control(y = FCMaxRatedCurrent) annotation(
      Placement(transformation(extent = {{88, -6}, {108, 14}}, origin = {-4, -38})));
    Modelica.Blocks.Math.Division division annotation(
      Placement(transformation(extent = {{121.525, 11.819}, {141.525, 31.819}}, origin = {12, -50})));
    Modelica.Blocks.Sources.RealExpression SplitComponent(y = FCLowVal) annotation(
      Placement(transformation(extent = {{-58.0, 6.0}, {-38.0, 26.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
    parameter Modelica.Units.SI.Power FCLowVal;
    parameter Modelica.Units.SI.Power FCPowerRequired;
    parameter Modelica.Units.SI.Power FCMaxRatedPower;
    parameter Modelica.Units.SI.Voltage Stack_v;
    parameter Modelica.Units.SI.Current FCMaxRatedCurrent;
    //Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent = {{102.0,-46.0},{122.0,-26.0}},origin = {0.0,0.0},rotation = 0.0)));
    Modelica.Blocks.Math.Division division1 annotation(
      Placement(transformation(origin = {8, -6}, extent = {{121.525, 11.819}, {141.525, 31.819}})));
    Modelica.Blocks.Sources.RealExpression V_Control(y = Stack_v) annotation(
      Placement(transformation(origin = {94, -6}, extent = {{-10, -10}, {10, 10}})));
  equation
    connect(realExpression3.y, switch2.u3) annotation(
      Line(points = {{-1, 24}, {36, 24}, {36, 26}}, color = {0, 0, 127}));
    connect(uinput.y, lessEqual2.u1) annotation(
      Line(points = {{-77, 28}, {-62, 28}, {-62, -10}, {-20, -10}}, color = {0, 0, 127}));
    connect(uinput.y, greater.u1) annotation(
      Line(points = {{-77, 28}, {-42.5, 28}, {-42.5, 72}, {-8, 72}}, color = {0, 0, 127}));
    connect(greater.y, switch.u2) annotation(
      Line(points = {{15, 72}, {24.90277777777778, 72}, {24.90277777777778, 104.19444444444446}, {34.80555555555556, 104.19444444444446}}, color = {255, 0, 255}));
    connect(uinput.y, greater2.u1) annotation(
      Line(points = {{-77, 28}, {-68, 28}, {-68, -36}, {-20, -36}}, color = {0, 0, 127}));
    connect(greater2.y, and1.u2) annotation(
      Line(points = {{3, -36}, {10, -36}, {10, -18}, {16, -18}}, color = {255, 0, 255}));
    connect(lessEqual2.y, and1.u1) annotation(
      Line(points = {{3, -10}, {16, -10}}, color = {255, 0, 255}));
    connect(and1.y, switch2.u2) annotation(
      Line(points = {{39, -10}, {39, 34}, {36, 34}}, color = {255, 0, 255}));
    connect(switch.y, add2.u1) annotation(
      Line(points = {{57.8056, 104.194}, {80, 104.194}, {80, 37.0905}, {87.7374, 37.0905}}, color = {0, 0, 127}));
    connect(I_Control.y, division.u2) annotation(
      Line(points = {{105, -34}, {132, -34}}, color = {0, 0, 127}));
    connect(SplitComponent.y, greater.u2) annotation(
      Line(points = {{-37, 16}, {-32, 16}, {-32, 64}, {-8, 64}}, color = {0, 0, 127}));
    connect(SplitComponent.y, lessEqual2.u2) annotation(
      Line(points = {{-37, 16}, {-32, 16}, {-32, -18}, {-20, -18}}, color = {0, 0, 127}));
    connect(LowerValue.y, switch2.u1) annotation(
      Line(points = {{6.88889, 43.1111}, {12.8889, 43.1111}, {12.8889, 47.1111}, {36, 47.1111}, {36, 42}}, color = {0, 0, 127}));
    connect(zVal.y, switch.u3) annotation(
      Line(points = {{-21, 96}, {-21, 96.19444444444443}, {34.80555555555556, 96.19444444444443}}, color = {0, 0, 127}));
    connect(zval2.y, greater2.u2) annotation(
      Line(points = {{-37, -46}, {-37, -44}, {-20, -44}}, color = {0, 0, 127}));
    connect(RequiredPOwer.y, switch.u1) annotation(
      Line(points = {{9, 112}, {34.80555555555556, 112}, {34.80555555555556, 112.19444444444446}}, color = {0, 0, 127}));
    connect(switch2.y, add2.u2) annotation(
      Line(points = {{59, 34}, {95.7374, 34}, {95.7374, 25.0905}, {87.7374, 25.0905}}, color = {0, 0, 127}));
    connect(add2.y, division1.u1) annotation(
      Line(points = {{110, 32}, {118, 32}, {118, 22}, {128, 22}}, color = {0, 0, 127}));
    connect(V_Control.y, division1.u2) annotation(
      Line(points = {{106, -6}, {110, -6}, {110, 10}, {128, 10}}, color = {0, 0, 127}));
    connect(division1.y, division.u1) annotation(
      Line(points = {{150, 16}, {158, 16}, {158, -6}, {122, -6}, {122, -22}, {132, -22}}, color = {0, 0, 127}));
    connect(division.y, y) annotation(
      Line(points = {{154, -28}, {168, -28}, {168, 18}, {186, 18}}, color = {0, 0, 127}));
    annotation(
      Icon(graphics = {Rectangle(origin = {32, 2}, extent = {{-138.14115652083177, 120.1959149555095}, {138, -120}}), Text(textString = "FC Logic", origin = {38, 51}, extent = {{-95.77977812132227, 31.868838925895844}, {96, -31}}), Ellipse(origin = {48, -50}, extent = {{-34.5663198187478, 37.20838371872752}, {34, -38}})}),
      Diagram);
  end FC250kcurrent;

  /*FuelCellEffciency*/

  model FuelCellEfficiency
    partial model Base
      //External Model repository for Local Fuel Cell base use
      /*FluidPort*/

      connector FluidPort "Fluid port for low fidelity models in microgrid components"
        replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.Hydrogen constrainedby MasterModel_SA5_ParameterExpFuel.Templates.SimpleFuel "Transported medium";
        Modelica.Units.SI.Pressure p "Pressure";
        flow Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate";
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false), graphics = {Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end FluidPort;

      /*FuelCellIcon*/

      model FuelCellIcon
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100.0, -100.0}, {100.0, 100.0}}), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, radius = 20), Line(points = {{-24, 38}}, color = {28, 108, 200}, thickness = 1), Rectangle(extent = {{-74, 1.05}, {-62, -4.95}}, lineColor = {28, 108, 200}, fillColor = {255, 170, 170}, fillPattern = FillPattern.Solid, origin = {18, 4.95}), Rectangle(extent = {{-10, 1.05}, {1.99999, -4.95}}, lineColor = {28, 108, 200}, fillColor = {170, 213, 255}, fillPattern = FillPattern.Solid, origin = {-6, 4.95}), Polygon(points = {{-44, -6}, {36, -6}, {36, -86}, {-44, -86}, {-44, -6}}, lineColor = {28, 108, 200}, fillColor = {215, 215, 215}, fillPattern = FillPattern.Solid, origin = {-26, 6}), Text(extent = {{-90, 34}, {-70, 14}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, textString = "+", origin = {30, -34}), Text(extent = {{-2, 34}, {18, 14}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, origin = {-18, -32}, textString = "-"), Line(points = {{-52, -2}, {-52, -10}}, pattern = LinePattern.None), Polygon(points = {{-22, -108}, {-22, -108}}, lineColor = {28, 108, 200}, lineThickness = 0.5, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Line(points = {{-40, 60}}, color = {28, 108, 200}, thickness = 0.5), Line(points = {{-70, -40}, {-80, -40}, {-80, 0}, {-90, 0}}, color = {28, 108, 200}), Polygon(points = {{-32, -2}, {-32, -20}, {-40, -20}, {-40, -60}, {-32, -60}, {-32, -78}, {-28, -78}, {-28, -60}, {-20, -60}, {-20, -20}, {-28, -20}, {-28, -2}, {-32, -2}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Rectangle(extent = {{30, 22}, {80, -28}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Line(points = {{38, 14}, {48, 14}}, color = {28, 108, 200}, thickness = 0.5), Line(points = {{38, 12}, {42, 12}}, color = {28, 108, 200}, thickness = 0.5), Line(points = {{44, 12}, {48, 12}}, color = {28, 108, 200}, thickness = 0.5), Line(points = {{62, -16}, {72, -16}}, color = {28, 108, 200}, thickness = 0.5), Line(points = {{68, -18}, {72, -18}}, color = {28, 108, 200}, thickness = 0.5), Line(points = {{62, -18}, {66, -18}}, color = {28, 108, 200}, thickness = 0.5), Line(points = {{30, -28}, {80, 22}}, color = {28, 108, 200}), Line(points = {{-100, 60}, {54, 60}, {54, 22}}, color = {28, 108, 200}), Line(points = {{80, 0}, {90, 0}}, color = {28, 108, 200}), Line(points = {{-10, 6}, {-10, 26}, {20, 26}, {20, 0}, {30, 0}}, color = {28, 108, 200}), Line(points = {{-50, 6}, {-50, 26}, {-10, 26}, {-10, 26}}, color = {28, 108, 200})}));
      end FuelCellIcon;

      /*Economy Thingy*/
      type Time_yr = Real(final quantity = "Time", final unit = "yr");
      type PerPower = Real(final quantity = "PerPower");
      type PerPower_PerkW = PerPower(final unit = "1/kW");
      type PerPowerTime = Real(final quantity = "perPowerTime");
      type PerPowerTime_PerkWyr = PerPowerTime(final unit = "1/(kW.yr)");
      // End of the Repository
      replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.Hydrogen constrainedby MasterModel_SA5_ParameterExp.Fuel.Hydrogen "Transported medium" annotation(
         choicesAllMatching);
      extends FuelCellIcon;
      //   Medium medium;
      // Parameters
      parameter Modelica.Units.SI.Temperature T = 313.15 "Cell operating temperature" annotation(
        Dialog(group = "Operating point"));
      parameter Modelica.Units.SI.PartialPressure p_H2 = 40000 "Partial pressure of H2 on anode surface of membrane" annotation(
        Dialog(group = "Operating point"));
      parameter Modelica.Units.SI.PartialPressure p_O2 = 21000 "Partial pressure of O2 on cathode surface of membrane" annotation(
        Dialog(group = "Operating point"));
      parameter Modelica.Units.SI.Area A_cell = 180e-4 "Cell area" annotation(
        Dialog(group = "Cell characteristics and polarization"));
      parameter Real n_cell(min = n_cell_min, max = n_cell_max) = 100 "Number of cells in stack, can be used for scaling purposes" annotation(
        Dialog(group = "Stack parametrization"));
      // Advanced parameters
      parameter Modelica.Units.SI.Voltage V_limit = 0.1 "Smoothing interval for voltage to avoid negative voltages. Activates when V < V_limit" annotation(
        Dialog(tab = "Numerics"));
      // Calculated parameters
      final parameter Modelica.Units.SI.Voltage V0 = V0_liquid - 0.85e-3*(T - T_ref25C) + 4.3085e-5*T*(Modelica.Math.log(p_H2/p_NTP) + 0.5*Modelica.Math.log(p_O2/p_NTP)) "Open Circuit Voltage" annotation(
        Dialog(group = "Calculated parameters"));
      // Constants
      constant Modelica.Units.SI.Voltage V0_liquid = 1.229 "Standard potential for lower heat value";
      constant Integer z = 2 "Number of exchanged electrons";
      constant Modelica.Units.SI.Temperature T_ref25C = 298.15 "Reference temperature at 25C";
      constant Modelica.Units.SI.Pressure p_NTP = 101325 "Normal pressure in Pa = 1 atm";
      //  constant Modelica.Units.SI.MolarEnergy H2HHV = 286e3 "Higher heating value of Hydrogen";
      //  constant Modelica.Units.SI.MolarEnergy H2LHV = 242e3 "Lower heating value of Hydrogen";
      // Economy
      //parameter Modelica.Units.SI.Power P_rat(displayUnit="kW") = 212*n_cell "Rated power [W]. Corresponds to 0.75 V/cell, which is when concentration losses start to become significant"
      //parameter Time_yr lifetime=25 "Expected lifetime [yr]" annotation (Dialog(tab="Economy"));
      //parameter PerPower_PerkW capex_p=0 "CAPEX per rated power [1/kW]" annotation (Dialog(tab="Economy"));
      //parameter PerPowerTime_PerkWyr fixed_opex_p=0 "OPEX per kW per year [1/(kWyr)]" annotation (Dialog(tab="Economy"));
      // Economy
      parameter Modelica.Units.SI.Power P_rat(displayUnit = "kW") = 212*n_cell "Rated power [W]. Corresponds to 0.75 V/cell, which is when concentration losses start to become significant" annotation(
        Dialog(tab = "Economy"));
      // Optimization
      parameter Boolean n_cell_free_ = false "If true, then number of cells is free in optimization" annotation(
        Dialog(group = "Design", tab = "Optimization"));
      parameter Real n_cell_min = 1 "Minimum amount of cells in optimization" annotation(
        Dialog(enable = n_cell_free_, group = "Design", tab = "Optimization"));
      parameter Real n_cell_max = 1000 "Maximum amount of cell in  optimization" annotation(
        Dialog(enable = n_cell_free_, group = "Design", tab = "Optimization"));
      // Control
      parameter Boolean control_power = false "If true, control power. If false control current" annotation(
        Dialog(group = "Control"));
      parameter Modelica.Units.SI.CurrentDensity J_max = 15000 "Maximum current density, when the concentration loss starts getting significant" annotation(
        Dialog(enable = not control_power, group = "Control"));
      parameter Modelica.Units.SI.Current I_max = J_max*A_cell "Maximum current signal" annotation(
        Dialog(enable = not control_power, group = "Control"));
      parameter Modelica.Units.SI.Current I_min = 0 "Minimum current signal" annotation(
        Dialog(enable = not control_power, group = "Control"));
      parameter Modelica.Units.SI.Power P_max = P_rat "Maximum power signal" annotation(
        Dialog(enable = control_power, group = "Control"));
      parameter Modelica.Units.SI.Power P_min = 0 "Minimum power signal" annotation(
        Dialog(enable = control_power, group = "Control"));
      // Variables
      Modelica.Units.SI.Voltage V_stack "Stack Voltage";
      Modelica.Units.SI.Voltage V_cell "Cell Voltage";
      Modelica.Units.SI.CurrentDensity J "Current density";
      Modelica.Units.SI.Current I "Stack current";
      Modelica.Units.SI.MolarFlowRate ndot_H2 "Hyrdogen molar flow rate";
      Modelica.Units.SI.HeatFlowRate Q_cool "Cooling demand";
      // Ideal transformer
      Modelica.Units.SI.Current I_out "Current at secondary side of Ideal transformer";
      Modelica.Units.SI.Voltage V_out "Voltage at secondary side of Ideal transformer";
      // Summary variables
      Modelica.Units.SI.Power P_stack "Stack total power output";
      Modelica.Units.SI.Power P_loss "Stack total power loss (Based on LHV)";
      Modelica.Units.SI.Efficiency eta_e "Electrical efficiency";
      // Connector Interface
      Modelica.Electrical.Analog.Interfaces.NegativePin pin "Electrical Connector" annotation(
        Placement(transformation(extent = {{86.93043192491228, -13.069568075087687}, {113.06956807508772, 13.069568075087687}}, rotation = 0.0, origin = {0.0, 0.0}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      FluidPort fluidPort(redeclare package Medium = Medium) "Hydrogen flow Connector" annotation(
        Placement(transformation(extent = {{-110.0, -10.0}, {-90.0, 10.0}}, origin = {0.0, 0.0}, rotation = 0.0)));
      Modelica.Blocks.Interfaces.RealInput I_control if not control_power "Current control input in p.u." annotation(
        Placement(transformation(extent = {{-20.0, -20.0}, {20.0, 20.0}}, origin = {0.0, -120.0}, rotation = 90.0), iconTransformation(extent = {{-12, -12}, {12, 12}}, rotation = 0, origin = {-112, 60})));
      Modelica.Blocks.Interfaces.RealInput P_control if control_power "Power control input in p.u." annotation(
        Placement(transformation(extent = {{-20.0, -20.0}, {20.0, 20.0}}, origin = {0, -120}, rotation = 90.0), iconTransformation(extent = {{-12, -12}, {12, 12}}, rotation = 0, origin = {-112, 60})));
    protected
      Modelica.Blocks.Interfaces.RealInput u_ctrl "Local control interface";
      //To allow switching between controlled current and power
    equation
// Electrical connection
      I = A_cell*J;
// Control
      if control_power then
        P_stack = u_ctrl*(P_max - P_min) + P_min;
      else
        I = u_ctrl*(I_max - I_min) + I_min;
      end if;
// Ideal transformer
      I*V_stack = I_out*V_out;
      pin.i = -I_out;
      pin.v = V_out;
// Hydrogen consumption
      ndot_H2 = I*n_cell/(z*Modelica.Constants.F);
// Hydrogen connection
      fluidPort.m_flow = ndot_H2*Medium.MolarMass;
// Heat generated
      Q_cool = n_cell*V0*I - P_stack;
// Summary
      V_stack = V_cell*n_cell;
      P_stack = I*V_stack;
      n_cell*V0*eta_e = V_stack;
      P_loss = fluidPort.m_flow*Medium.LHV - P_stack;
      connect(P_control, u_ctrl);
      connect(I_control, u_ctrl);
      annotation(
        Dialog(tab = "Economy"));
    end Base;

    extends Base(P_max = n_cell*V_cell_max*I_max);
    parameter Real eta = 0.6 "Fuel cell efficiency" annotation(
      Dialog(group = "Stack parametrization"));
    final parameter Modelica.Units.SI.Voltage V_cell_max = V0*eta;
  equation
    V_cell = V0*eta;
    annotation(
      experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002),
      __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=NLSanalyticJacobian",
      __OpenModelica_simulationFlags(lv = "LOG_STDOUT,LOG_ASSERT,LOG_STATS", s = "dassl", variableFilter = ".*"));
  end FuelCellEfficiency;

  /*DCBus*/

  model DCbusBar "DC Busbar"
    output Modelica.Units.SI.Voltage v(stateSelect = StateSelect.never);
    Modelica.Electrical.Analog.Interfaces.PositivePin term "Terminal" annotation(
      Placement(transformation(extent = {{-7, -60}, {7, 60}}, rotation = 0)));
  equation
    term.i = 0;
    v = term.v;
    annotation(
      defaultComponentName = "bus1",
      Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics = {Text(extent = {{-100, -98}, {100, -120}}, lineColor = {0, 0, 0}, textString = "%name"), Rectangle(extent = {{-10, 80}, {10, -80}}, lineColor = {0, 0, 255}, pattern = LinePattern.None, fillColor = {0, 0, 255}, fillPattern = FillPattern.Solid)}));
  end DCbusBar;

  // Repository End MasterModel
  parameter Modelica.Units.SI.Power P_nominal = 1e9 "Nominal power in the micro grid";
  parameter Boolean optim = false "True, if model is optimized, dynamic simulation if false";
  parameter Integer N_gen = 2 "Number of Generator";
  parameter Real H2SOCstart = 0;
  parameter Modelica.Units.SI.Volume H2Tankstorage = 23;
  parameter Modelica.Units.SI.Mass TankcontentDiesel = 60000;
  /*Component Parameters for API  Exposure*/
  parameter Real transCellSplitter_MaxRatedPowerCell;
  parameter Real transCellSplitter_Minimal_SOC;
  
  parameter Real fc250CurrentLogic_LowOperationValue = 50000;
  parameter Real fc250CurrentLogic_HighOperationValue = 100000;
  parameter Real fc250CurrentLogic_FCMaxRatedPower = fuelCell2.P_max;
  parameter Real fc250CurrentLogic_StackRatedVoltage = fuelCell2.V_cell_max*fuelCell2.n_cell;
  parameter Real fc250CurrentLogic_FCMaxRatedCurrent = fuelCell2.I_max;
  
  parameter Modelica.Units.SI.Volume hydrogenTank_Volume = H2Tankstorage ;
  parameter Real hydrogenTank_Tempurature;
  parameter Real hydrogenTank_SOCStart = 0;
  parameter Boolean hydrogenTank_use_pressure_constraint = true;
  
  parameter Real fuelCell_Tempurature;
  //parameter Fuel fuelCell_Medium
  parameter Real fuelCell_P_H2;
  parameter Real fuelCell_P_Q2;
  parameter Real fuelCell_P_max = 100000;
  parameter Real fuelCell_P_min;
  parameter Real fuelCell_A_cell = 0.03;
  parameter Real fuelCell_n_cell = 300;
  parameter Real fuelCell_eta = 0.4;
  parameter Boolean fuelCell_control_power=false;
  
  parameter Real mCtlr_SOC_tank_Sec = 0.1;
  parameter Real mCtlr_SOC_min_Sec =0.1;
  parameter Real mCtlr_P_Charging_Max = battery1.P_max;
  //parameter Real mCtlr_P_max = {generator1.P_rat, generator2.P_rat};
  parameter Real mCtlr_DieselControlforBattery = 0;
  parameter Real mCtlr_SOC_min = 0.1;
  
  parameter Real generator_V_flow_Frat = 0.185/3600;
  parameter Real generator_V_flow_Fidle = 0.025/3600;
  parameter Boolean generator_Use_Const_Off = false;
  parameter Real generator_Eta_El_Const=0.40;
  parameter Boolean generator_FuelConsumptionIsVolumetric = true;
  parameter Real generator_M_Flow_Fidle = 0.00027777777*((0.08451*750));
  parameter Real generator_M_Flow_FRat =  0.00027777777*((0.08451*750));
  parameter Real genreator_P_rat = 270000;
  //parameter Fuel - generator_Fuel
  
  parameter Boolean electricalLoad_Use_Input = true;
  parameter Real electricalLoad_Load_In = 1000;
  
  parameter Real transformer_Effciency = 1;
  parameter Modelica.Units.SI.Power transformer_Power_Nominal = P_nominal;
  parameter Modelica.Units.SI.Power transformer_P_max = 10 * P_nominal;
  
  
  parameter Real battery_Eff_Charge = 0.99;
  parameter Boolean battery_Set_SOC_Final_Start = true;
  parameter Real battery_Capacity = 7.74e+8;  
  parameter Real battery_P_max = 450000;
  parameter Real battery_SOC_start = 0.9;
  
  parameter Modelica.Units.SI.Power electricalGrid_Power_Nominal= P_nominal;
  parameter Real electricalGrid_V_ref = 1000;
  
  parameter Modelica.Units.SI.Mass idealTank_M_content_max = TankcontentDiesel;
  parameter Modelica.Units.SI.Mass idealTank_M_content_start = TankcontentDiesel;
  // Medium iDealTank Fuel Medium
  /*END--Component Parameters for API  Exposure*/
  /*Master Model Parameters and  Component Instantiation*/
  // Part Battery
  MasterModel_SA5_ParameterExp.BatteryDualControl battery1(eff_charge = 0.99, set_SOC_final_start_ = true, capacity = 7.74e+8, P_max = 450000, SOC_start = 0.9) annotation(
    Placement(transformation(origin = {-6, 54}, extent = {{-6, -6}, {6, 6}})));
  // Part Electrical Untitlity
  MasterModel_SA5_ParameterExp.Converter_ACDC converter_ACDC(efficiency = 1, V_ref_DC = 1, power_nominal = P_nominal, P_max = 10*P_nominal) "Inverter" annotation(
    Placement(transformation(origin = {108, 54}, extent = {{-10, -10}, {10, 10}})));
  MasterModel_SA5_ParameterExp.ElectricalGrid electricalGrid(power_nominal = P_nominal, V_ref = 1000) annotation(
    Placement(transformation(origin = {156, 52}, extent = {{-10, -10}, {10, 10}})));
  MasterModel_SA5_ParameterExp.ElectricLoad electricLoad(use_input = true, load_in = 1000) annotation(
    Placement(transformation(origin = {75, 19}, extent = {{5, -5}, {-5, 5}})));
  MasterModel_SA5_ParameterExp.Transformer transformer(efficiency = 1, power_nominal = P_nominal, P_max = 10*P_nominal) annotation(
    Placement(transformation(origin = {32, 46}, extent = {{-6, -6}, {6, 6}})));
  Modelica.Blocks.Sources.Sine electric_purchasePrice(phase = -0.5*.Modelica.Constants.pi, f = 1/(72*3600), amplitude = 0.08*0.4, offset = 0.08) annotation(
    Placement(transformation(origin = {196, 52}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  //Part real Expression
  Modelica.Blocks.Sources.RealExpression BattSOC(y = battery1.SOC) if not optim annotation(
    Placement(transformation(origin = {-90, 50}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Blocks.Sources.RealExpression LoadPower(y = electricLoad.P_load) if not optim annotation(
    Placement(transformation(origin = {-90, 16}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Blocks.Sources.RealExpression RenewablePower(y = fuelCell2.P_stack + fuelCell3.P_stack) annotation(
 /*fuelCell2.P_stack + fuelCell3.P_stack*/Placement(transformation(origin = {-90, 34}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Blocks.Sources.RealExpression TotalGeneratorSOC(y = 1) if not optim annotation(
    Placement(transformation(origin = {-50, 82}, extent = {{10, 10}, {-10, -10}}, rotation = 90)));
  Modelica.Blocks.Sources.RealExpression TotalGeneratorSOC2(y = 0) if not optim annotation(
    Placement(transformation(origin = {-42, -42}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Blocks.Sources.RealExpression methanoltankstate(y = idealTankMultiPort.SOC) if not optim annotation(
    Placement(transformation(origin = {-44, -16}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
  // Part Mechanical
  MasterModel_SA5_ParameterExp.Generator generator1(V_flow_frat = 0.185/3600, V_flow_fidle = 0.025/3600, use_const_eff = false, eta_el_const = 0.40, fuelConsumptionIsVolumetric = true, m_flow_fidle = 0.00027777777*((0.08451*750)), m_flow_frat = 0.00027777777*((0.08451*750)), P_rat = 270000, redeclare replaceable package Fuel = MasterModel_SA5_ParameterExp.Fuel.MethanolFuel) annotation(
    Placement(transformation(origin = {-5, 19}, extent = {{5, -5}, {-5, 5}})));
  MasterModel_SA5_ParameterExp.Generator generator2(V_flow_frat = 0.185/3600, V_flow_fidle = 0.025/3600, use_const_eff = false, eta_el_const = 0.40, fuelConsumptionIsVolumetric = true, m_flow_fidle = 0.00027777777*((0.08451*750)), m_flow_frat = 0.00027777777*((0.08451*750)), P_rat = 270000, redeclare replaceable package Fuel = MasterModel_SA5_ParameterExp.Fuel.MethanolFuel) annotation(
    Placement(transformation(origin = {-5, -1}, extent = {{5, -5}, {-5, 5}})));
  MasterModel_SA5_ParameterExp.Generator generator3(V_flow_frat = 0.185/3600, V_flow_fidle = 0.025/3600, use_const_eff = false, eta_el_const = 0.40, fuelConsumptionIsVolumetric = true, m_flow_fidle = 0.00027777777*((0.08451*750)), m_flow_frat = 0.00027777777*((0.08451*750)), P_rat = 270000, redeclare package Fuel = MasterModel_SA5_ParameterExp.Fuel.Diesel) annotation(
    Placement(transformation(origin = {-11, -23}, extent = {{5, -5}, {-5, 5}})));
  MasterModel_SA5_ParameterExp.IdealTankMultiPort idealTankMultiPort(m_content_max = TankcontentDiesel, m_content_start = TankcontentDiesel, redeclare replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.MethanolFuel) annotation(
    Placement(transformation(origin = {70, -18}, extent = {{-10, -10}, {10, 10}})));
  // Part Renewable
  // Part Controller
  MasterModel_SA5_ParameterExp.MasterControllerSingleBattery masterControllerSingleBattery(n = N_gen, SOC_tank_sec = 0.1, SOC_min_sec = 0.1, P_charging_max = battery1.P_max, P_max = {generator1.P_rat, generator2.P_rat}, DieselControlforBattery = 0, SOC_min = 0.1) annotation(
    Placement(transformation(origin = {-44, 34}, extent = {{-10, -10}, {10, 10}})));
  TransCellsplitter dualCellSplitter annotation(
    Placement(transformation(origin = {-12, 130}, extent = {{-10, -10}, {10, 10}})));
  FC250kcurrent fC250kcurrent2(FCLowVal = 50000, FCPowerRequired = 100000, FCMaxRatedPower = fuelCell2.P_max, Stack_v = fuelCell2.V_cell_max*fuelCell2.n_cell, FCMaxRatedCurrent = fuelCell2.I_max) annotation(
    Placement(transformation(origin = {42, 160}, extent = {{-10, -10}, {10, 10}})));
  FC250kcurrent fC250kcurrent3(FCLowVal = 50000, FCPowerRequired = 100000, FCMaxRatedPower = fuelCell3.P_max, Stack_v = fuelCell2.V_cell_max*fuelCell2.n_cell, FCMaxRatedCurrent = fuelCell2.I_max) annotation(
    Placement(transformation(origin = {40, 108}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Blocks.Sources.RealExpression TankSOC(y = 1) if not optim annotation(
    Placement(transformation(origin = {-20, 166}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  Modelica.Blocks.Sources.RealExpression TankSOC2(y = 1) if not optim annotation(
    Placement(transformation(origin = {-4, 166}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  HardCodeDutyCycle hardCodeDutyCycle1 if not optim annotation(
    Placement(transformation(origin = {-112, 132}, extent = {{10, -10}, {-10, 10}})));
  Modelica.Blocks.Math.Gain gain1(k = 1000) annotation(
    Placement(transformation(origin = {-58, 132}, extent = {{-10, -10}, {10, 10}})));
  Tank tank2(redeclare replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.compressedhydrogen, SOC_start = H2SOCstart, V = H2Tankstorage, T(displayUnit = "K"), use_pressure_constraint = true) annotation(
    Placement(transformation(origin = {74, 138}, extent = {{-10, -10}, {10, 10}})));
  Tank tank3(redeclare replaceable package Medium = MasterModel_SA5_ParameterExp.Fuel.compressedhydrogen, SOC_start = H2SOCstart, V = H2Tankstorage, T(displayUnit = "K"), use_pressure_constraint = true) annotation(
    Placement(transformation(origin = {70, 88}, extent = {{-10, -10}, {10, 10}})));
  FuelCellEfficiency fuelCell2(A_cell = 0.03, n_cell = 300, eta = 0.4, control_power = false, P_max = 100000) annotation(
    Placement(transformation(origin = {108, 160}, extent = {{-10, -10}, {10, 10}})));
  FuelCellEfficiency fuelCell3(A_cell = 0.03, n_cell = 300, eta = 0.4, control_power = false, P_max = 100000) annotation(
    Placement(transformation(origin = {108, 110}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Electrical.Analog.Sources.ConstantVoltage constantVoltage2(V = 1) annotation(
    Placement(transformation(origin = {150, 160}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Electrical.Analog.Sources.ConstantVoltage constantVoltage3(V = 1) annotation(
    Placement(transformation(origin = {150, 110}, extent = {{-10, -10}, {10, 10}})));
  DCbusBar bus3 annotation(
    Placement(transformation(origin = {188, 110}, extent = {{-10, -10}, {10, 10}})));
  DCbusBar bus2 annotation(
    Placement(transformation(origin = {188, 162}, extent = {{-10, -10}, {10, 10}})));
  Modelica.Blocks.Sources.RealExpression PowerProfile(y = gain1.y) if not optim annotation(
    Placement(transformation(origin = {136, 20}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
equation
  connect(generator1.outlet_fuel, idealTankMultiPort.fluidPort2) annotation(
    Line(points = {{-3, 14}, {-3, 0}, {24, 0}, {24, -15}, {60, -15}}, color = {28, 108, 200}));
  connect(generator2.outlet_fuel, idealTankMultiPort.fluidPort) annotation(
    Line(points = {{-3, -6}, {-3, -18}, {60, -18}}, color = {28, 108, 200}));
  connect(generator3.outlet_fuel, idealTankMultiPort.fluidPort3) annotation(
    Line(points = {{-9, -28}, {-4, -28}, {-4, -40}, {22, -40}, {22, -21}, {60, -21}}, color = {28, 108, 200}));
  connect(generator1.pin_AC, transformer.pin_sec) annotation(
    Line(points = {{0, 19}, {32, 19}, {32, 40}}, color = {0, 140, 72}));
  connect(generator2.pin_AC, transformer.pin_sec) annotation(
    Line(points = {{0, -1}, {30, -1}, {30, 0}, {32, 0}, {32, 40}}, color = {0, 140, 72}));
  connect(generator3.pin_AC, transformer.pin_sec) annotation(
    Line(points = {{-6, -23}, {28, -23}, {28, 26}, {32, 26}, {32, 40}}, color = {0, 140, 72}));
  connect(transformer.pin_sec, electricLoad.n) annotation(
    Line(points = {{32, 40}, {32, 19}, {70, 19}}, color = {0, 140, 72}));
  connect(battery1.p, converter_ACDC.pin_DC) annotation(
    Line(points = {{0, 54}, {14, 54}, {14, 62}, {90, 62}, {90, 54}, {100, 54}}, color = {0, 0, 255}));
  connect(electricalGrid.p, converter_ACDC.pin_AC) annotation(
    Line(points = {{146, 52}, {131, 52}, {131, 54}, {116, 54}}, color = {0, 140, 72}));
  connect(transformer.pin_prim, converter_ACDC.pin_DC) annotation(
    Line(points = {{32, 52}, {66, 52}, {66, 54}, {100, 54}}, color = {0, 140, 72}));
  connect(electric_purchasePrice.y, electricalGrid.price) annotation(
    Line(points = {{186, 52}, {166, 52}}, color = {0, 0, 127}));
  connect(TotalGeneratorSOC2.y, generator3.P_sp) annotation(
    Line(points = {{-31, -42}, {-24, -42}, {-24, -12}, {-10, -12}, {-10, -20}, {-13, -20}}, color = {0, 0, 127}));
  connect(TotalGeneratorSOC.y, masterControllerSingleBattery.SOC_Tank) annotation(
    Line(points = {{-50, 71}, {-50, 58.5}, {-44, 58.5}, {-44, 46}}, color = {0, 0, 127}));
  connect(LoadPower.y, masterControllerSingleBattery.P_load_1) annotation(
    Line(points = {{-78, 16}, {-70, 16}, {-70, 43}, {-55, 43}}, color = {0, 0, 127}));
  connect(RenewablePower.y, masterControllerSingleBattery.P_renew_1) annotation(
    Line(points = {{-78, 34}, {-66, 34}, {-66, 39}, {-55, 39}}, color = {0, 0, 127}));
  connect(BattSOC.y, masterControllerSingleBattery.SOC_1) annotation(
    Line(points = {{-78, 50}, {-74, 50}, {-74, 32}, {-64, 32}, {-64, 35}, {-55, 35}}, color = {0, 0, 127}));
  connect(masterControllerSingleBattery.P_charge_1, battery1.P_charge) annotation(
    Line(points = {{-34, 42}, {-34, 56}, {-10, 56}}, color = {0, 0, 127}));
  connect(masterControllerSingleBattery.P_discharge_1, battery1.P_discharge) annotation(
    Line(points = {{-34, 38}, {-20, 38}, {-20, 52}, {-10, 52}}, color = {0, 0, 127}));
  connect(methanoltankstate.y, masterControllerSingleBattery.TankmultipleSOC[2]) annotation(
    Line(points = {{-44, -5}, {-44, 10.5}, {-46, 10.5}, {-46, 24}}, color = {0, 127, 127}));
  connect(methanoltankstate.y, masterControllerSingleBattery.TankmultipleSOC[1]) annotation(
    Line(points = {{-44, -5}, {-44, 10.5}, {-40, 10.5}, {-40, 26}}, color = {0, 0, 127}));
  connect(masterControllerSingleBattery.P_dispatch[1], generator1.P_sp) annotation(
    Line(points = {{-32, 30}, {-4, 30}, {-4, 24}}, color = {0, 0, 127}));
  connect(masterControllerSingleBattery.P_dispatch[2], generator2.P_sp) annotation(
    Line(points = {{-32, 30}, {-24, 30}, {-24, 8}, {-4, 8}, {-4, 4}}, color = {0, 0, 127}));
  connect(TankSOC.y, dualCellSplitter.SOC1) annotation(
    Line(points = {{-20, 155}, {-20, 144}}, color = {0, 0, 127}));
  connect(TankSOC2.y, dualCellSplitter.SOC2) annotation(
    Line(points = {{-4, 155}, {-4, 144}, {-12, 144}}, color = {0, 0, 127}));
  connect(hardCodeDutyCycle1.out, gain1.u) annotation(
    Line(points = {{-100, 132}, {-70, 132}}, color = {0, 0, 127}));
  connect(gain1.y, dualCellSplitter.u) annotation(
    Line(points = {{-46, 132}, {-34, 132}, {-34, 136}, {-24, 136}}, color = {0, 0, 127}));
  connect(dualCellSplitter.y, fC250kcurrent2.u) annotation(
    Line(points = {{6, 138}, {18, 138}, {18, 165}, {32, 165}}, color = {0, 0, 127}));
  connect(dualCellSplitter.y2, fC250kcurrent3.u) annotation(
    Line(points = {{6, 134}, {18, 134}, {18, 113}, {30, 113}}, color = {0, 0, 127}));
  connect(fC250kcurrent2.y, fuelCell2.I_control) annotation(
    Line(points = {{59, 162}, {82, 162}, {82, 166}, {96, 166}}, color = {0, 0, 127}));
  connect(tank2.outlet, fuelCell2.fluidPort) annotation(
    Line(points = {{80, 138}, {90, 138}, {90, 160}, {98, 160}}, color = {28, 108, 200}));
  connect(fC250kcurrent3.y, fuelCell3.I_control) annotation(
    Line(points = {{57, 110}, {77.5, 110}, {77.5, 116}, {96, 116}}, color = {0, 0, 127}));
  connect(tank3.outlet, fuelCell3.fluidPort) annotation(
    Line(points = {{76, 88}, {86, 88}, {86, 110}, {98, 110}}, color = {28, 108, 200}));
  connect(fuelCell3.pin, constantVoltage3.p) annotation(
    Line(points = {{118, 110}, {140, 110}}, color = {0, 0, 255}));
  connect(fuelCell2.pin, constantVoltage2.p) annotation(
    Line(points = {{118, 160}, {140, 160}}, color = {0, 0, 255}));
  connect(constantVoltage2.n, bus2.term) annotation(
    Line(points = {{160, 160}, {188, 160}, {188, 162}}, color = {0, 0, 255}));
  connect(constantVoltage3.n, bus3.term) annotation(
    Line(points = {{160, 110}, {188, 110}}, color = {0, 0, 255}));
  connect(bus3.term, converter_ACDC.pin_DC) annotation(
    Line(points = {{188, 110}, {192, 110}, {192, 78}, {94, 78}, {94, 54}, {100, 54}}, color = {0, 0, 255}));
  connect(bus2.term, converter_ACDC.pin_DC) annotation(
    Line(points = {{188, 162}, {198, 162}, {198, 88}, {96, 88}, {96, 54}, {100, 54}}, color = {0, 0, 255}));
  connect(PowerProfile.y, electricLoad.P) annotation(
    Line(points = {{125, 20}, {80, 20}}, color = {0, 0, 127}));
  annotation(
    Icon(graphics = {Text(origin = {-3, 73}, extent = {{-95, 79}, {95, -79}}, textString = "MASTER", fontName = "Old English Text MT"), Rectangle(origin = {0, -20}, fillColor = {170, 0, 255}, fillPattern = FillPattern.VerticalCylinder, extent = {{-60, 60}, {60, -60}})}),
    uses(Modelica(version = "4.0.0")),
    Diagram(coordinateSystem(extent = {{-140, 180}, {220, -60}})),
    version = "",
    experiment(StartTime = 0, StopTime = 26880, Tolerance = 1e-6, Interval = 448),
    __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=NLSanalyticJacobian",
    __OpenModelica_simulationFlags(lv = "LOG_STDOUT,LOG_ASSERT,LOG_STATS", s = "dassl", variableFilter = ".*"));
end MasterModel_SA5_ParameterExp;
